{
  "openapi": "3.0.1",
  "info": {
    "title": "AppScan Rest API",
    "description": "This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.",
    "contact": {
      "name": "HCL Software Customer Support portal",
      "url": "https://support.hcltechsw.com/csm"
    },
    "license": {
      "name": "License Agreement",
      "url": "https://www.hcltechsw.com/resources/license-agreements"
    },
    "version": "v4"
  },
  "paths": {
    "/api/v4/Account/ExternalLogin/{provider}": { },
    "/api/v4/Account/ExternalLogoutLinks": { },
    "/api/v4/Account/UserNameLogin": { },
    "/api/v4/Account/IsAuthenticated": { },
    "/api/v4/Account/Logout": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check if the provided access token is valid",
        "operationId": "Account_Logout",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v4/Account/RefreshAccessToken": { },
    "/api/v4/Account/ApiKeyLogin": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Users login with API Key",
        "description": "Used only if you have an active subscription to the service.\n\r\n             Login using this action is allowed only for a user associated with a valid service subscription.\n\r\n             This action returns an access token that can be used as \"Bearer Token\" for accessing the API.",
        "operationId": "Account_ApiKeyLogin",
        "requestBody": {
          "description": "API Key",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Account/ApiKey": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Generate a new API Key for the current user.",
        "description": "If an API key already exist, this action will delete the old key.",
        "operationId": "Account_CreateApiKey",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v4/Account/SupportImpersonateLogin": { },
    "/api/v4/Account/SubscriptionInfo": { },
    "/api/v4/Account/TenantInfo": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get information about the Tenant",
        "description": "Return information about the current user and the Tenant (Organization). Including information about the available subscriptions.",
        "operationId": "Account_GetTenantInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update TenantInfo",
        "operationId": "Account_UpdateTenantInfo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TenantInfoModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantInfoModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Account/RegisterNewOrg": { },
    "/api/v4/Account/RegisterNewOrgMHS": { },
    "/api/v4/Account/GetMHSPayloadSignature": { },
    "/api/v4/Account/AddLicenseMHS": { },
    "/api/v4/Account/AddFlexNetLicense": { },
    "/api/v4/Account/ActivateUserAndAccount": { },
    "/api/v4/Account/RegisterAndActivate": { },
    "/api/v4/Account/UserInfo": { },
    "/api/v4/Account/GlobalHiddenFeaturesToDisplay": { },
    "/api/v4/Account/ShowUserWelcomeMessage": { },
    "/api/v4/Account/InviteUsers": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Invite User to the current organization",
        "description": "Up to 100 users per call. \n\r\n            Connect users with up to 10 AssetGroups",
        "operationId": "Account_InviteUsers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUsersModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InviteResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Account/{id}/DownloadOrgLogoWithSignature": { },
    "/api/v4/Account/ActivateInvitation": { },
    "/api/v4/Account/HandleInvitation": { },
    "/api/v4/Account/OktaUser": { },
    "/api/v4/Account/RegisterTrialUser": { },
    "/api/v4/Account/RegisterUsers": { },
    "/api/v4/Apps": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get applications",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Apps_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Create an application",
        "operationId": "Apps_Post",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreateModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/{id}": {
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete application",
        "operationId": "Apps_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "application id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Apps"
        ],
        "summary": "Update application",
        "operationId": "Apps_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/Reset/{id}": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Reset application",
        "description": "Reset options (set in the request body):\n<b>DeleteIssues:</b>  Delete all the Application’s issues.\n<b>DeleteScans:</b>  Delete all the Application’s scans.\n<b>DeleteChartsData:</b> Delete all the data related to the application from the Dashboard charts. (This will affect charts from previous dates too. The application will be removed from all graphs that contain application counts.)\n",
        "operationId": "Apps_Reset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Determine which data will be cleared",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationResetModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/{id}/CorrelationGroups": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get Correlation Groups for an application",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Apps_GetAppCorrelationGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applyPolicies",
            "in": "query",
            "description": "Determine which policies will be applied for filtering in non compliant issues",
            "schema": {
              "enum": [
                "None",
                "All",
                "Select"
              ],
              "type": "string",
              "default": "None"
            }
          },
          {
            "name": "selectPolicyIds",
            "in": "query",
            "description": "If applyPolicies is set to Select, only issues that are not compliant with these policies will be filtered in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "If provided, it overrides the Accept-Language header. (If not provided and there is no Accept-Language header, the locale will be: en-US)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationGroupModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationGroupModelPageResultModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/ImportFile": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Import Apps",
        "description": "Import Apps from uploaded file to application specified with id.\n\r\n            Includes file format validation.\n\r\n            The expected Content-Type of the request is multipart/form-data. The request should contain a single file parameter named \"fileToUpload\".",
        "operationId": "Apps_ImportFile",
        "parameters": [
          {
            "name": "assetGroupId",
            "in": "query",
            "description": "Asset group Id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "If provided, this parameter will override the name of the uploaded file, including its extension(CSV).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "uploadedFile"
                ],
                "type": "object",
                "properties": {
                  "uploadedFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "uploadedFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportAppResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/{appId}/Comments": { },
    "/api/v4/Apps/{appId}/Policy": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get policies associated with this application",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Apps_GetAppPolicies",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyAssociationModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Apps/{appId}/Policy/{policyId}": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Associate a policy with an application or update association parameters",
        "operationId": "Apps_AttachPolicy",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Policy parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameValuePair"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyAssociationModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Apps"
        ],
        "summary": "Update the policy parameters for this application",
        "operationId": "Apps_UpdatePolicy",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Policy configuration for this application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyConfigurationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyAssociationModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Disassociate a policy from an application",
        "operationId": "Apps_DeletePolicyAssociation",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/AssetGroups": {
      "get": {
        "tags": [
          "AssetGroups"
        ],
        "summary": "Get Asset Groups",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "AssetGroups_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AssetGroups"
        ],
        "summary": "Create a new asset group",
        "operationId": "AssetGroups_Post",
        "requestBody": {
          "description": "Asset group model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetGroupModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/AssetGroups/{id}": {
      "delete": {
        "tags": [
          "AssetGroups"
        ],
        "summary": "Delete asset group by ID",
        "operationId": "AssetGroups_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "forceDeletion",
            "in": "query",
            "description": "If 'true' then force deletion of asset group include its related applications and disassociate its members",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AssetGroups"
        ],
        "summary": "Update an asset group",
        "operationId": "AssetGroups_Put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Asset group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Assert group update model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetGroupModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/AssetGroups/MoveAssetGroupResources/{sourceId}/{destId}": {
      "post": {
        "tags": [
          "AssetGroups"
        ],
        "summary": "Move an asset group",
        "operationId": "AssetGroups_Move",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "The source asset group id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "destId",
            "in": "path",
            "description": "The destination asset group id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Determine the move asset group resources configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupMoveModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Audits": {
      "get": {
        "tags": [
          "Audits"
        ],
        "summary": "Get all the audits in the current context",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Audits_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AuditModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Audits/AdditionalData/{auditId}": {
      "get": {
        "tags": [
          "Audits"
        ],
        "summary": "Get audit additional data",
        "operationId": "Audits_GetAdditionalData",
        "parameters": [
          {
            "name": "auditId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditAdditionalData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/BusinessUnits": {
      "get": {
        "tags": [
          "BusinessUnits"
        ],
        "summary": "Get all BusinessUnits",
        "description": "This action returns all the organization's BusinessUnits",
        "operationId": "BusinessUnits_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitModelPageResultModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BusinessUnits"
        ],
        "summary": "Create a new BusinessUnit",
        "operationId": "BusinessUnits_Create",
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBusinessUnitModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v4/BusinessUnits/Merge/{idToKeep}/{idToMerge}": {
      "post": {
        "tags": [
          "BusinessUnits"
        ],
        "summary": "Merge Business Units",
        "operationId": "BusinessUnits_Merge",
        "parameters": [
          {
            "name": "idToKeep",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "idToMerge",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/BusinessUnits/{id}": {
      "delete": {
        "tags": [
          "BusinessUnits"
        ],
        "summary": "Delete BusinessUnit",
        "operationId": "BusinessUnits_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "BusinessUnit was deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BusinessUnits"
        ],
        "summary": "Update BusinessUnit",
        "operationId": "BusinessUnits_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessUnitModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/ChartData/Trending": { },
    "/api/v4/ChartData/GetValueDistributionByBusinessUnit": { },
    "/api/v4/ChartData/GetValueDistribution/{metricType}": { },
    "/api/v4/ChartData/MetricsTrend": { },
    "/api/v4/ChartData/GetMetricsTrend": { },
    "/api/v4/ChartData/GetMetricsKpi": { },
    "/api/v4/ChartData/GetTopAppsWithIssues": { },
    "/api/v4/ChartData/GetTopLicenses": { },
    "/api/v4/ChartData/GetAppsCountByTechnology": { },
    "/api/v4/ChartData/ScanExecutionsPerTechnology": { },
    "/api/v4/ChartData/ScanExecutionsPerFinalStatus": { },
    "/api/v4/CustomFields/{orgId}/customFields": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Adds a new custom field for the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The custom field request.",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/CustomFields/organization/{orgId}/CustomFields": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Get all custom fields for a specific organization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of custom fields"
          },
          "404": {
            "description": "Organization not found or no custom fields defined"
          }
        }
      }
    },
    "/api/v4/CustomFields/Apps/{appId}/CustomFields": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Updates the value of an existing custom field for a specific application.",
        "description": "This API only updates the value of an existing custom field (`AppCustomField`) for the application. \r\nNew custom fields cannot be added using this endpoint. The custom field must already exist \r\nat the organization level (`OrgCustomField`) and have a corresponding record for the application.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the application to update the custom field for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the column name and new value to update.",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldValueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/CustomFields/application/{appId}/CustomFields": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Get all custom fields for a specific application",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "The ID of the application",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of custom fields"
          },
          "404": {
            "description": "Application not found"
          }
        }
      }
    },
    "/api/v4/Domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get domains",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Domains_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModelPageResultModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/{id}": {
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Update domain",
        "operationId": "Domains_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainManagementModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/DeleteDomains": {
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete domains",
        "operationId": "Domains_Multiple_Delete",
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDomainsResult"
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDomainsResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDomainsResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDomainsResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDomainsResult"
                }
              }
            }
          },
          "204": {
            "description": "Domain was deleted successfully"
          }
        }
      }
    },
    "/api/v4/Domains/ResendMail/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Resend domain verification mail",
        "operationId": "Domains_ResendMail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "domain id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mailPrefix",
            "in": "query",
            "description": "mail prefix",
            "schema": {
              "enum": [
                "Admin",
                "Administrator",
                "HostMaster",
                "Root",
                "WebMaster",
                "PostMaster"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success, mail was sent"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/DownloadFile/{id}": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Download domain verification HTML",
        "operationId": "Domains_DownloadFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "domain id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/Verify": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Performs domain ownership verification",
        "operationId": "Domains_Verify",
        "requestBody": {
          "description": "Only the STP part of the model is relevant",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModelVerificationModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/Confirm/{verificationKey}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Confirm domain ownership by domain id",
        "operationId": "Domains_Confirm",
        "parameters": [
          {
            "name": "verificationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/Domains/Register/{registrationType}": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Create domain ownership verification either by Mail or HTML",
        "operationId": "Domains_Register",
        "parameters": [
          {
            "name": "registrationType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "enum": [
                "Email",
                "Html"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DomainOwnershipModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/Domains/Allow": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Allow domain",
        "operationId": "Domains_Allow",
        "parameters": [
          {
            "name": "assetGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllowDomainModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowDomainResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/Block": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "block domains",
        "operationId": "Domains_Block",
        "requestBody": {
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BlockDomainRequestModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Domains/PreAllowCheck": { },
    "/api/v4/FileUpload": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Upload file",
        "description": "Upload a file to use in actions that require files (such as Create Scan and Execute Scan).\n\r\n            Supported file formats: APK, CONFIG, CSV, IPA, IRX, SCAN, SCANT and ZIP.\n\r\n            If ZIP file is uploaded 'fileType' parameter is required, and it must contain only DAST XML.\n\r\n            Returns an ID for use as input for the other actions.\n\r\n            Includes file format validation.\n\r\n            The expected Content-Type of the request is multipart/form-data. The request should contain a single file parameter named \"uploadedFile\".\n\r\n            The uploaded file will be available for use for 30 minutes. After this period, the file will be deleted from the server",
        "operationId": "FileUpload_Post",
        "parameters": [
          {
            "name": "fileType",
            "in": "query",
            "description": "Uploaded File type (required for zip files only)",
            "schema": {
              "enum": [
                "ZippedXmlDast",
                "SourceCodeArchive",
                "DastPostmanCollectionJson",
                "DastPostmanCollectionZip",
                "AsencEncryptionArchive",
                "DastOpenAPIFile"
              ],
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "If provided, it will be used as the file name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "uploadedFile"
                ],
                "type": "object",
                "properties": {
                  "uploadedFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "uploadedFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v4/FixGroups/{scope}/{scopeId}": {
      "get": {
        "tags": [
          "FixGroups"
        ],
        "summary": "Get fix groups in scope",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "FixGroups_Get",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The Scope of the fix group",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "description": "id of the Scope",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applyPolicies",
            "in": "query",
            "description": "Determine which policies will be applied for filtering in non compliant issues",
            "schema": {
              "enum": [
                "None",
                "All",
                "Select"
              ],
              "type": "string",
              "default": "None"
            }
          },
          {
            "name": "selectPolicyIds",
            "in": "query",
            "description": "If applyPolicies is set to Select, only issues that are not compliant with these policies will be filtered in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "If provided, it overrides the Accept-Language header. (If not provided and there is no Accept-Language header, the locale will be: en-US)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixGroupPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/FixGroupPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/FixGroups/{scope}/{scopeId}/{fixGroupId}": {
      "put": {
        "tags": [
          "FixGroups"
        ],
        "summary": "Update a fix group according to a given scope",
        "description": "The StickyStatus parameter determines how the new Status affects issues in the FixGroup.\n\r\nIf StickyStatus is False, the Status you set affects only issues in the FixGroup that are filtered-in by the scope and policy.\n\r\nIf StickyStatus is True, the Status is applied to all issues in the FixGroup (scope and policy are ignored), including new issues\r\nthat become associated with it later.\n",
        "operationId": "FixGroups_Update",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The Scope of the fix group",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "description": "id of the Scope",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fixGroupId",
            "in": "path",
            "description": "Fix Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applyPolicies",
            "in": "query",
            "description": "Determine which policies will be applied for filtering in non compliant issues",
            "schema": {
              "enum": [
                "None",
                "All",
                "Select"
              ],
              "type": "string",
              "default": "None"
            }
          },
          {
            "name": "selectPolicyIds",
            "in": "query",
            "description": "If applyPolicies is set to Select, only issues that are not compliant with these policies will be filtered in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixGroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriageResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/FixGroups/{fixGroupId}/Comments": {
      "get": {
        "tags": [
          "FixGroups"
        ],
        "summary": "Get all fixGroup's comments",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "FixGroups_GetComments",
        "parameters": [
          {
            "name": "fixGroupId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentModelResponsePageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/{scope}/{scopeId}": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get filtered issues",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Issues_Get",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The Scope of the issues",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "description": "id of the Scope",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applyPolicies",
            "in": "query",
            "description": "Determine which policies will be applied for filtering in non compliant issues",
            "schema": {
              "enum": [
                "None",
                "All",
                "Select"
              ],
              "type": "string",
              "default": "None"
            }
          },
          {
            "name": "selectPolicyIds",
            "in": "query",
            "description": "If applyPolicies is set to Select, only issues that are not compliant with these policies will be filtered in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "If provided, it overrides the Accept-Language header. (If not provided and there is no Accept-Language header, the locale will be: en-US)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/IssueModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Issues"
        ],
        "summary": "Update filtered issues",
        "description": "The NUpdatedIssues value in the response counts only issues whose the status was updated. \n",
        "operationId": "Issues_UpdateFilteredIssues",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The Scope of the issues",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "description": "id of the Scope",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "odataFilter",
            "in": "query",
            "description": "Odata filter that will be applied",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applyPolicies",
            "in": "query",
            "description": "Determine which policies will be applied for filtering in non compliant issues",
            "schema": {
              "enum": [
                "None",
                "All",
                "Select"
              ],
              "type": "string",
              "default": "None"
            }
          },
          {
            "name": "selectPolicyIds",
            "in": "query",
            "description": "If applyPolicies is set to Select, only issues that are not compliant with these policies will be filtered in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "requestBody": {
          "description": "New issue data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriageResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/{issueId}": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get a single issue",
        "operationId": "Issues_GetIssue",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "id of the issue",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "If provided, it overrides the Accept-Language header. (If not provided and there is no Accept-Language header, the locale will be: en-US)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/UpdateIssuesForScopeByIds/{scope}/{scopeId}": { },
    "/api/v4/Issues/{issueId}/Comments": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get all fixGroup's comments",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Issues_GetIssueComments",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentModelResponsePageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/{issueId}/Details": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get the issue details in HTML format.",
        "operationId": "Issues_IssueDetails",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "issue id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "locale (default value: en-US)",
            "schema": {
              "type": "string",
              "default": "en-US"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/{issueId}/AutoFix": { },
    "/api/v4/Issues/{issueId}/History": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Get issue history",
        "operationId": "Issues_GetIssueHistory",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeAllScanExecutions",
            "in": "query",
            "description": "If set to true, the history will contain all the scan executions that found this issue",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "locale (default value: en-US)",
            "schema": {
              "type": "string",
              "default": "en-US"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueChangeSet"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not allowed to access the issue or issue does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/ImportIssues": {
      "post": {
        "tags": [
          "Issues"
        ],
        "summary": "Import issues from uploaded file to application specified with id",
        "operationId": "Issues_ImportIssues",
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "scanName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportIssueStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Issues/IsNoise": { },
    "/api/v4/OSLibraries/GetLicensesForScope/{scope}/{scopeId}": { },
    "/api/v4/OSLibraries/GetLibrariesForScope/{scope}/{scopeId}": { },
    "/api/v4/OSLibraries/GetLibrariesForOrg": { },
    "/api/v4/OSLibraries/GetAppsContainingLibrary": { },
    "/api/v4/OSLibraries/GetScansContainingLibrary": { },
    "/api/v4/OSLibraries/GetLicenses": { },
    "/api/v4/Policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get all policies.\r\nThe API returns both predefined and custom policies.",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Policies_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create a new custom policy",
        "operationId": "Policies_Post",
        "requestBody": {
          "description": "Expression in a json format. E.g: {'Function':'StartDate','Parameters':['2017-09-30']} :",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPolicyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Policy name already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "Policy was created successfully"
          }
        }
      }
    },
    "/api/v4/Policies/{id}": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Update custom policy",
        "operationId": "Policies_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Updated policy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPolicyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "403": {
            "description": "Invalid policy ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete custom policy",
        "operationId": "Policies_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Policy was successfully deleted"
          },
          "403": {
            "description": "Invalid policy ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Presences": {
      "get": {
        "tags": [
          "Presences"
        ],
        "summary": "Get all the Presences in the current context",
        "description": "This action returns all the presences that can be accessed using the provided access token",
        "operationId": "Presences_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresencePageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PresencePageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Presences"
        ],
        "summary": "Create a new Presence",
        "operationId": "Presences_Post",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPresence"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Presence"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Presences/{presenceId}": {
      "delete": {
        "tags": [
          "Presences"
        ],
        "summary": "Delete Presence",
        "operationId": "Presences_Delete",
        "parameters": [
          {
            "name": "presenceId",
            "in": "path",
            "description": "Presence id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Presences"
        ],
        "summary": "Update Presence",
        "operationId": "Presences_Update",
        "parameters": [
          {
            "name": "presenceId",
            "in": "path",
            "description": "Presence Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresence"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Presences/{presenceId}/NewKey": {
      "get": {
        "tags": [
          "Presences"
        ],
        "summary": "Generate a new key for the given presence and return it.",
        "description": "This action invalidates the previous key.",
        "operationId": "Presences_GenerateNewKey",
        "parameters": [
          {
            "name": "presenceId",
            "in": "path",
            "description": "Presence ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Presences/{presenceId}/Download/{platform}": {
      "get": {
        "tags": [
          "Presences"
        ],
        "summary": "Download the AppScan Presence tool. Tool includes a new generated presence key",
        "operationId": "Presences_DownloadPresenceWithKey",
        "parameters": [
          {
            "name": "presenceId",
            "in": "path",
            "description": "The presenceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "platform",
            "in": "path",
            "description": "Presence platform",
            "required": true,
            "schema": {
              "enum": [
                "win_x64",
                "linux_x64",
                "osx_x64"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report jobs",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Reports_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v4/Reports/{id}/Download": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download a report",
        "operationId": "Reports_Download",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report job Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/Issues/{scope}/{id}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create issues report for selected issues",
        "description": "Full details of all issues in scope (JSON). \n\r\nPolicies and OData filters can be applied.\n\r\nIf policies are applied, the report will contain only issues that are not compliant with these policies.\r\n\n",
        "operationId": "Reports_CreateIssuesReport",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The entity id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuesReportJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/Security/{scope}/{id}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create security report for selected issues",
        "description": "PDF, HTML, XML or CSV format.\n\r\nPolicies and OData filters can be applied.\n\r\nIf policies are applied, the report will contain only issues that are not compliant with these policies.\r\n\n",
        "operationId": "Reports_CreateSecurityReport",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The entity id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityReportJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/Regulation/{scope}/{id}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create regulation report for selected issues",
        "description": "PDF or HTML format.\n\r\nPolicies and OData filters can be applied.\n\r\nIf policies are applied, the report will contain only issues that are not compliant with these policies.\r\nRegulationType must be on of:\r\n    OwaspTop10_2017, Sans25, EuGdpr_2016, PCI, Hipaa, OwaspTop10Mobile_2016, ISO27001, ISO27002, Wasc, Nist, \r\n    Sox, Fisma, Fippa, Efta, DisaStig, Padss, OwaspTop10_2021, OwaspTop10OpenApi_2019, Ccpa, FedRamp, Popia, \r\n    OwaspTop10Api_2023, Sans25_2023, OwaspTop10CloudNativeApp, Nis2\r\n\n",
        "operationId": "Reports_CreateRegulationReport",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The entity id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulationReportJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/License/{scope}/{id}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create open source licenses report",
        "description": "PDF or HTML format.\n\r\nOData filters can be applied.\r\n\n",
        "operationId": "Reports_CreateLicenseReport",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "enum": [
                "Application",
                "Scan",
                "ScanExecution"
              ],
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The entity id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseReportJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/Sbom/{scanExecutionId}": { },
    "/api/v4/Reports/{id}": {
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete a report",
        "operationId": "Reports_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report job Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Report was deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Reports/{id}/DownloadWithSignature": { },
    "/api/v4/Reports/Article": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Article according to embedded Omnia link format, using Issue type ID or Article ID.",
        "operationId": "Reports_GetArticle",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Article ID",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "issuetype",
            "in": "query",
            "description": "Issue type ID",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Programing Language",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "api",
            "in": "query",
            "description": "API vulnerability Name",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "cveId",
            "in": "query",
            "description": "Instead of issuetype, used only for DAST 'Vulnerable Component' Issue-type",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "nl",
            "in": "query",
            "description": "Locale: returns html translation accoringly, or json article if nl='raw'. 'nl' defined by Omnia Articles - don't change !",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "light or dark",
            "schema": {
              "type": "string",
              "default": "light"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/Roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all tenant roles",
        "description": "This action returns all the organization's roles",
        "operationId": "Roles_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new role",
        "operationId": "Roles_Create",
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewRoleModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v4/Roles/{id}": {
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role was deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "operationId": "Roles_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get scans page",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Scans_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 500)",
            "schema": {
              "maximum": 500,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinScanModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MinScanModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/{scanId}": {
      "put": {
        "tags": [
          "Scans"
        ],
        "summary": "Modify scan data",
        "operationId": "Scans_Update",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of scan to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New scan data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDastScan"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Scans"
        ],
        "summary": "Delete the scan",
        "description": "Note that all ScanExecutions associated with this scan will be deleted too.",
        "operationId": "Scans_Delete",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of scan to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteIssues",
            "in": "query",
            "description": "Determine if the issues generated by this scan will also be deleted",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/{scanId}/PromoteIssues": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Promote personal scan's issues to the application level",
        "operationId": "Scans_PromoteIssues",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "Scan ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueMergeModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Executions/{scanId}": { },
    "/api/v4/Scans/{scanId}/Executions": {
      "delete": {
        "tags": [
          "Scans"
        ],
        "summary": "Delete all scan executions",
        "operationId": "Scans_DeleteScanExecutions",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteIssues",
            "in": "query",
            "description": "Determine if the issues generated by this scan will also be deleted",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Execute a scan",
        "description": "Execute the scan specified by ID.\n\r\n            If the execution requires a new file (Sca Analyzer or Static Analyzer), the file must first be uploaded (using <a href=\"#!/FileUpload/FileUpload_DefaultAction\" target=\"_blank\">/api/v2/FileUpload</a>). Then use the ID that is returned from the upload in the ```FileId``` parameter.",
        "operationId": "Scans_Execute",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of scan to be executed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "ID of file that was uploaded for the new execution",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanExecute"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New Scan was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanExecutionModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get basic details of all the executions of a scan",
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Scans_GetExecutions",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "Scan ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralScanExecutionModel"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Sast": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Create and execute a new Static Analyzer scan",
        "description": "Scan can be performed in one of the following options:\n\r\n1. Generate an IRX file using the IRX tool, and upload it (using /api/v4/FileUpload).\n\r\nUse the ID that is returned from the upload in the ```ApplicationFileId``` parameter.\r\n2. Scanning a git repository - provide the repository details in the ```RepositoryDetails```.\n\n\r\nYou should use one of the options, not both.\r\nNote that when scanning a git repository, you can provide ```Recurrence``` to set a scheduled scan executions.",
        "operationId": "Scans_CreateSastScan",
        "requestBody": {
          "description": "Scan properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewStaticScan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastScanModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Sca": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Create and execute a new SCA scan",
        "description": "Before creating a new scan, generate an IRX file using the <a href=\"#/Tools/Tools_SAClientUtil\" target=\"_blank\">IRX tool</a>, and upload it (using <a href=\"#/FileUpload/FileUpload_Post\" target=\"_blank\">/api/v4/FileUpload</a>).\n\r\n            Use the ID that is returned from the upload in the ```ApplicationFileId``` parameter.",
        "operationId": "Scans_CreateScaScan",
        "requestBody": {
          "description": "Scan properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewScaScan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New Scan was created successfully1",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaScanModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Iast": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Create and execute a new IAST Analyzer scan",
        "operationId": "Scans_CreateIastScan",
        "requestBody": {
          "description": "Scan properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewIastScan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IastScanModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Dast": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Create and execute a new Dynamic Analyzer scan",
        "description": "Create a new Dast Scan\n<ul><li>Some of the properties accept file ids - for using these properties, you have to upload the file using /api/v4/FileUpload before using this function. When uploading a file, a file id is returned.</li><li>If a Presence is not being used, all the scanned domains must be verified before creating the scan.</li><li>If a scan or scan template file is provided (in ScanOrTemplateFileId), the scan configuration is taken from there and ScanConfiguration cannot be provided.</li></ul>",
        "operationId": "Scans_CreateDastScan",
        "requestBody": {
          "description": "Scan properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDastScan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DastScanModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/ExecutionRawResults/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Download raw engine results",
        "operationId": "Scans_GetExecutionRawResults",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Scan Execution Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/DastExploreDataCounters/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get Explore Data Counters",
        "operationId": "Scans_GetExploreDataCounters",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExploreDataCounters"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/ScanLogs/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Download scan's log",
        "description": "Currently available for Dynamic/Static scans only.\n\r\nTrafficLog is available only for Dast scans.",
        "operationId": "Scans_GetScanLogs",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "scan ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "support",
            "in": "query",
            "description": "downloading the extended support logs",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/DastScanFile/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get scan file",
        "operationId": "Scans_GetDastScanFile",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/IsValidUrl": { },
    "/api/v4/Scans/StaticExecution/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get details of a Static scan execution",
        "description": "Use: GET /api/v4/Scans/SastExecution/{executionId}",
        "operationId": "Scans_GetStaticScanExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastScanExecutionModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v4/Scans/SastExecution/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get details of a Static scan execution",
        "operationId": "Scans_GetSastScanExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastScanExecutionModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/DynamicExecution/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get details of a Dynamic scan execution",
        "description": "Use: GET /api/v4/Scans/DastExecution/{executionId}",
        "operationId": "Scans_GetDynamicScanExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DastScanExecutionModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v4/Scans/DastExecution/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get details of a Dynamic scan execution",
        "operationId": "Scans_GetDastExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DastScanExecutionModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/ScaExecution/{executionId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get details of a Sca scan execution",
        "operationId": "Scans_GetScaScanExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaScanExecutionModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Dynamic/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get detailed description of a Dynamic scan",
        "description": "Please use: GET /api/v4/Scans/Dast/{scanId}",
        "operationId": "Scans_GetDynamicScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of the scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DastScanModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v4/Scans/Dast/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get detailed description of a Dynamic scan",
        "operationId": "Scans_GetDastScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of the scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DastScanModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Static/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get detailed description of a Static scan",
        "description": "Please use: GET /api/v4/Scans/Sast/{scanId}",
        "operationId": "Scans_GetStaticScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of the scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastScanModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v4/Scans/Sast/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get detailed description of a Static scan",
        "operationId": "Scans_GetSastScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of the scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SastScanModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Sca/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get detailed description of a Sca scan",
        "operationId": "Scans_GetScaScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of the scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaScanModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/UpdateIastScan/{scanId}": {
      "put": {
        "tags": [
          "Scans"
        ],
        "summary": "Modify IAST scan data",
        "operationId": "Scans_UpdateIastScan",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "ID of scan to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New scan data",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIastScan"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The update was completed successfully"
          },
          "400": {
            "description": "Invalid scan Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/NewIastKey/{scanId}": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Generate new key for the IAST agent",
        "operationId": "Scans_GenerateNewIastKey",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "IAST Scan ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New key was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewIASTKey"
                }
              }
            }
          },
          "403": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v4/Scans/DownloadIastConfig/{scanId}": {
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Download IAST cofiguration",
        "operationId": "Scans_DownloadIastConfig",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "Scan identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/GetJobsStatistics": { },
    "/api/v4/Scans/Execution/{executionId}": {
      "delete": {
        "tags": [
          "Scans"
        ],
        "summary": "Delete scan execution",
        "operationId": "Scans_DeleteExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteIssues",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Scan Execution was deleted successfully"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Scans"
        ],
        "summary": "Get basic details of a scan execution",
        "operationId": "Scans_GetExecution",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralScanExecutionModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Scans/Execution/{executionId}/{operation}": {
      "put": {
        "tags": [
          "Scans"
        ],
        "summary": "Perform operations on a scan execution",
        "description": "Operations are available for certain technologies only:\n<b>Pause</b> - Pause a Dynamic scan\n<b>Resume</b> - Resume a Dynamic scan\n<b>Stop</b> - Stop an IAST scan\n",
        "operationId": "Scans_ExecutionAction",
        "parameters": [
          {
            "name": "executionId",
            "in": "path",
            "description": "Execution ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "operation",
            "in": "path",
            "description": "Operation",
            "required": true,
            "schema": {
              "enum": [
                "Pause",
                "Resume",
                "Stop"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v4/Scans/RepoSignature/{platform}": {
      "post": {
        "tags": [
          "Scans"
        ],
        "summary": "Get a signature for a given repository.\r\nThis function verifies that the user actually has access to the repository. \r\nIt does this by calling the GitHub API with the provided access token.",
        "operationId": "Repos_GetRepoSignature",
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "GitHub"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepoSignatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoSignature"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/ScanDemoFiles/{technology}": { },
    "/api/v4/Tools/DemoFiles/{demoFile}": { },
    "/api/v4/Tools/DeployConfiguration": { },
    "/api/v4/Tools/Report": { },
    "/api/v4/Tools/SampleReport": { },
    "/api/v4/Tools/PresenceV2": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Download Presence V2 package",
        "operationId": "Tools_GetPresenceV2",
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "description": "Platform - osx_x64 is not yet supported !!",
            "schema": {
              "enum": [
                "win_x64",
                "linux_x64",
                "osx_x64"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/TrafficRecorder/{platform}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Download a Standalone Traffic Recorder - used for recording traffic for dast scans.",
        "operationId": "Tools_GetTrafficRecorder",
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "description": "Platform",
            "required": true,
            "schema": {
              "enum": [
                "win_x64",
                "linux_x64"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/TrafficRecorderVersion/{platform}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Get Traffic Recorder version",
        "operationId": "Tools_GetTrafficRecorderVersion",
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "description": "Platform",
            "required": true,
            "schema": {
              "enum": [
                "win_x64",
                "linux_x64"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/IastAgent": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Download IAST Agent",
        "operationId": "Tools_DownloadIASTAgent",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Agent type (Java or DotNet)",
            "schema": {
              "enum": [
                "Java",
                "DotNet",
                "PhpWindows",
                "PhpRedHat",
                "PhpUbuntu",
                "Kubernetes"
              ],
              "type": "string",
              "default": "Java"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/DownloadIastAgent": { },
    "/api/v4/Tools/IastAgentWithKey": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Download IAST agent with access key.",
        "description": "Note: This operation invalidates the previous key.",
        "operationId": "Tools_DownloadIASTAgentWithKey",
        "parameters": [
          {
            "name": "scanId",
            "in": "query",
            "description": "Scan identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/DownloadIastAgentWithKey": { },
    "/api/v4/Tools/SAClientUtil/{id}/{type}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Download latest Client Utilities.",
        "operationId": "Tools_SAClientUtil",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "os",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "win"
            }
          },
          {
            "name": "meta",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Tools/PublicKey": { },
    "/api/SCX/StaticAnalyzer/SAClientUtil/{id}/{type}": { },
    "/api/SCX/StaticAnalyzer/PublicKey": { },
    "/api/v4/User": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "This API endpoint allows you to retrieve data using the <a target='_blank' href='https://www.odata.org/documentation/'>OData V4</a> interface. The response will contain the requested data in a paginated format.<br><br>Note: If the response is expected to contain many large records, it is recommended to use `$top` to limit the number of records returned or to use the `$select` to select only the required fields.",
        "operationId": "Users_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModelPageResultModel"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/UserModelPageResultModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/User/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "operationId": "Users_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove user from the current organization",
        "operationId": "Users_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/UserPreferences": { },
    "/api/v4/UserPreferences/{key}": { },
    "/api/v4/UserPreferences/DeleteAll": { },
    "/api/v4/Utils/HealthStatus": { },
    "/api/v4/Utils/Liveness": { },
    "/api/v4/Utils/Version": { },
    "/api/v4/Utils/EnvironmentInfo": { },
    "/api/v4/Utils/Regions": { },
    "/api/v4/Utils/GetMonitoredServices": { },
    "/api/v4/Utils/GetMonitoredService": { },
    "/api/v4/Webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all Webhooks",
        "description": "This action returns all the web hooks that can be accessed usingthe provided access token",
        "operationId": "Webhooks_Get",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModelPageResultModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create new Webhook",
        "description": "In order to create a Webhook for the entire Organization (does not belong to a specific AssetGroup), you should have the capability to access cross asset groups resources\n\r\n            If the Webhook is not Global, you will have to associate it to a resource (AssetGroup or Application) after creation.",
        "operationId": "Webhooks_Create",
        "requestBody": {
          "description": "New Webhook to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "New Webhook was created successfully"
          }
        }
      }
    },
    "/api/v4/Webhooks/{id}": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update specified Webhook",
        "description": "If a webhook is set to Global, it will affect all the relevant items that belong to the AssetGroup or to the Organization if the Webhook is defined in the organization level",
        "operationId": "Webhooks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Webhook properties to update",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete specified Webhook",
        "operationId": "Webhooks_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook was deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4/Webhooks/Associations/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get associations of a Webhook",
        "description": "A global Webhook is associated to the organization and therefore cannot have other associations.",
        "operationId": "Webhooks_GetAssociations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The max number of records. (Up to 5000)",
            "schema": {
              "maximum": 5000,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to skip.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "A function that must evaluate to true for a record to be returned. (e.g. Name eq 'sam' or Name eq 'dan')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specifies a subset of properties to return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Determines what values are used to order a collection of records. (e.g. Name,Id)",
            "schema": {
              "type": "String"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Specifies the related resources to be included in line with retrieved resources.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Specifies that the response to the request MUST include the count of the number of entities in the collection of entities.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookAssociation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a new association to the specified Webhook",
        "description": "A global Webhook is associated to the organization and therefore cannot have other associations.\n\r\n            In order to associate a Webhook to an Application or Assetgroup, you should have access to it",
        "operationId": "Webhooks_CreateAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New association to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=minimal;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=full;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.metadata=none;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=true;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;odata.streaming=false;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;IEEE754Compatible=false": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/json;IEEE754Compatible=true": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookAssociation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookAssociation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "New Webhook association was created successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete an association from the specified Webhook",
        "description": "In order to remove association you should have access to Scope object (Application or AssetGroup)",
        "operationId": "Webhooks_DeleteAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope of the association to delete",
            "schema": {
              "enum": [
                "AssetGroup",
                "Application"
              ],
              "type": "string"
            }
          },
          {
            "name": "scopeId",
            "in": "query",
            "description": "Scope id (AssetGroup or Application Id)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "201": {
            "description": "New Webhook association was created successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenData": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string",
            "nullable": true
          },
          "Expire": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ActivationResult": {
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "string",
            "format": "uuid"
          },
          "OrgName": {
            "type": "string",
            "nullable": true
          },
          "ActivationStatus": {
            "enum": [
              "Verified",
              "VerifiedPendingIDPRegistration",
              "ActivationInvalidLicense",
              "ActivationFailed",
              "AccountAssigned",
              "Assigned",
              "ActivationLinkExpired",
              "ShouldFillRegistrationForm",
              "DeprecatedInvitation",
              "DeprecatedActivation"
            ],
            "type": "string"
          },
          "MHSError": {
            "enum": [
              "None",
              "GeneralError",
              "InvalidInput",
              "MissingCapabilities",
              "MHSLicenseGeneralStructureUnrecognized",
              "MHSLicenseCertificateInvalid",
              "MHSLicensePasetoSignatureInvalid",
              "MHSLicensePasetoRawPayloadUnrecognized",
              "MHSLicenseInvalidAs360Fingerprint",
              "MHSLicenseDeploymentIdMismatch",
              "MHSLicenseIssuedEarlierThanCurrentlyUsed",
              "MHSLicenseHasNoRelevantEntitlements",
              "MHSLicenseWasAlreadyUploaded",
              "MHSLicenseOldFeatureIsMissing",
              "MHSLicenseChangingPreviousMhsValue",
              "MHSLicenseWasIssuedTooLongAgo"
            ],
            "type": "string"
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "SignedUsername": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddMHSLicenseResult": {
        "type": "object",
        "properties": {
          "MHSError": {
            "enum": [
              "None",
              "GeneralError",
              "InvalidInput",
              "MissingCapabilities",
              "MHSLicenseGeneralStructureUnrecognized",
              "MHSLicenseCertificateInvalid",
              "MHSLicensePasetoSignatureInvalid",
              "MHSLicensePasetoRawPayloadUnrecognized",
              "MHSLicenseInvalidAs360Fingerprint",
              "MHSLicenseDeploymentIdMismatch",
              "MHSLicenseIssuedEarlierThanCurrentlyUsed",
              "MHSLicenseHasNoRelevantEntitlements",
              "MHSLicenseWasAlreadyUploaded",
              "MHSLicenseOldFeatureIsMissing",
              "MHSLicenseChangingPreviousMhsValue",
              "MHSLicenseWasIssuedTooLongAgo"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AllowDomainModel": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "DomainUrl": {
            "type": "string",
            "nullable": true
          },
          "UrlType": {
            "enum": [
              "Domain",
              "IpAddress"
            ],
            "type": "string"
          },
          "IsAccessLimitedForAssetGroups": {
            "type": "boolean"
          },
          "AssetGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllowDomainResult": {
        "type": "object",
        "properties": {
          "Domain": {
            "$ref": "#/components/schemas/DomainModel"
          },
          "Message": {
            "enum": [
              "NONE",
              "APK_PROCESSED",
              "BLOCK_NEW_SCANS",
              "HIGH_SEVERITY",
              "INCOMPLETE_SCAN_WITH_ISSUES",
              "INVALID_INPUT",
              "GENERAL_ERROR",
              "INVALID_APK_FILE",
              "INVALID_IPA_FILE",
              "INVALID_IPAX_FILE",
              "INVALID_IRX_FILE",
              "WARNING_UTILITIES_VERSION",
              "INVALID_DAST_SCAN_CONFIGURATION",
              "INVALID_TOTP_CONFIGURATION",
              "INVALID_JOB_IDENTIFIER",
              "INVALID_SCAN_IDENTIFIER",
              "INVALID_REPORT_TYPE",
              "INVALID_INCREMENTAL_BASE_JOB_IDENTIFIER",
              "INCREMENTAL_BASE_SCAN_NO_TEST_STAGE",
              "INCREMENTAL_BASE_JOB_NOT_RELATED_TO_CURRENT_SCAN",
              "INCREMENTAL_BASE_SCAN_FILE_WAS_DELETED",
              "LOW_SEVERITY",
              "MEDIUM_SEVERITY",
              "NOT_ALLOWED_DAST_SCAN_HOST",
              "NOT_ALLOWED_DAST_SCAN_HOST_ADDITIONAL_DOMAIN",
              "ADDITIONAL_DOMAINS_LIMIT_EXCEEDED",
              "NOT_ASSOCIATED_PRESENCE_TO_APPLICATION",
              "APPLICATION_PRESENCES_LIMIT_EXCEEDED",
              "NO_ISSUES",
              "REPORT_PROBLEMS",
              "CLIENT_UTIL_DOWNLOAD_PROBLEMS",
              "SCAN_ENDED_WITH_ERROR",
              "SCAN_FAILURE",
              "SCAN_LIMIT_EXCEEDED",
              "SCAN_CONCURRENT_AND_QUEUED_EXCEEDED",
              "SUCCESSFUL_SCAN_MESSAGE",
              "UNAUTHORIZED_ACTION",
              "UNSUPPORTED_UPLOAD_REQUEST_TYPE",
              "UNSUPPORTED_LOGIN_METHOD",
              "SCAN_STILL_IN_PROGRESS",
              "SCAN_ALREADY_RUNNING_ON_APPLICATION",
              "FREE_SCAN_IS_NOT_ALLOWED",
              "FREEMIUM_SCAN_NOT_ALLOWED",
              "INVALID_USER",
              "NO_RESCAN_WHILE_SCANNING",
              "INVALID_SUBSCRIPTION_FOR_SERVICE",
              "SUBSCRIPTION_EXPIRED_OR_DEACTIVATED",
              "INVALID_IRX_VERSION",
              "FEATURE_AVAILABLE_SOON",
              "SPECIFY_VALID_OS",
              "SCAN_IS_DELETED",
              "SCAN_DELETION_NOT_ALLOWED",
              "KNOWN_USER_SCX_LOGIN_ERROR",
              "UNKNOWN_USER_SCX_LOGIN_ERROR",
              "GENERAL_LOGIN_ERROR",
              "UNKNOWN_USER_SCX_LOGIN_ERROR_API",
              "GENERAL_LOGIN_ERROR_API",
              "LOGIN_BLOCKED",
              "SUBSCRIPTION_SCAN_LIMIT_REACHED",
              "APPLICATION_REQUIRES_OFFERINGTYPE_SWITCH",
              "RESCAN_DISABLED_ON_FIRST_FAILURE",
              "PROMOTE_ON_SCAN_FAILURE",
              "TRIAL_SCAN_LIMIT_REACHED",
              "PRESENCE_NAME_ALREADY_EXISTS",
              "PRESENCE_WAS_DELETED",
              "PRESENCE_IS_INACTIVE",
              "PSS_NOTSUPPORTED_DURING_TRIAL",
              "INVALID_STARTING_URL",
              "INVALID_STARTING_URL_LOCALHOST",
              "INVALID_STARTING_URL_SCHEME",
              "INVALID_LOGIN_SEQUENCE",
              "SCAN_NAME_MISSING",
              "FILE_ID_MISSING",
              "UNABLE_TO_LOAD_FILE_FROM_STORAGE",
              "FILE_SIZE_LIMIT_EXCEEDED",
              "INPUT_LENGTH_LIMIT_EXCEEDED",
              "WRONG_TECHNOLOGY",
              "THE_FILE_HAS_ALREADY_DELETED",
              "JOB_IS_NOT_READY",
              "MISSING_FILE_EXTENSION",
              "INCORRECT_FILE_EXTENSION",
              "RESCAN_DISABLED",
              "INSUFFICIENT_SUBSCRIPTION_CREDIT",
              "CONSULTANT_DELETION_NOT_ALLOWED",
              "INVALID_DAST_FILE",
              "DAST_FILE_REQUIRED",
              "INVALID_URL",
              "INVALID_DAST_FILE_RESCAN",
              "REPORT_IS_NOT_AVAILABLE",
              "UPLOAD_DAST_PERMISSION",
              "IFA_SCAN_LIMIT_REACHED",
              "INVALID_SCANT_MULTISTEP_TESTONLY",
              "INVALID_SCAN_MULTISTEP_MANUALEXPL_TESTONLY",
              "UNABLE_TO_CHANGE_SCAN_OFFERING_TYPE",
              "UNABLE_TO_USE_TRIAL_SUBSCIPTION_IF_PAID_SUBSCRIPTION_EXISTS",
              "SCAN_DOES_NOT_MATCH_APPLICATION_RESTRICTIONS_APPTYPE",
              "SCAN_DOES_NOT_MATCH_APPLICATION_RESTRICTIONS_DOMAIN",
              "SCAN_DOES_NOT_MATCH_APPLICATION_RESTRICTIONS_PACKAGE",
              "INVALID_DAST_CONFIG_FILE",
              "INVALID_IAST_CONFIG_FILE",
              "APP_CONCURRENT_SCANS_AND_QUEUE_EXCEEDED",
              "MISSING_OFFERING_TYPE",
              "ASSETGROUP_NAME_ALREADY_EXISTS",
              "ASSETGROUP_ASSOCIATION_ERROR",
              "ASSETGROUP_CHANGE_DEFAULT_NOTALLOWED",
              "ASSETGROUP_INVALID_CONTACT_PERSON",
              "ASSETGROUP_OVERRIDE_AUTO_CLOSE_NOTALLOWED",
              "ROLE_NAME_ALREADY_EXISTS",
              "ROLE_NOT_EXISTS",
              "ROLE_PREDEFINED_DELETION_NOT_ALLOWED",
              "ROLE_PREDEFINED_EDIT_NOT_ALLOWED",
              "ROLE_DEFAULT_DELETION_NOT_ALLOWED",
              "ROLE_UNSET_DEFAULT_NOT_ALLOWED",
              "ROLE_ASSOCIATION_ERROR",
              "ORGANIZATION_NO_ACCESS",
              "ORGANIZATION_CUSTOMIZATIONS_NOT_FOUND",
              "APPLICATION_NAME_ALREADY_EXISTS",
              "APPLICATION_NO_ACCESS",
              "SCAN_NO_ACCESS",
              "SCAN_EXECUTION_NO_ACCESS",
              "ISSUE_NO_ACCESS",
              "FIXGROUP_NO_ACCESS",
              "PACKAGE_NO_ACCESS",
              "INVALID_CSV_FILE",
              "ISSUES_INVALID_IDS",
              "REPORT_IN_PROGRESS_ERROR",
              "MISSING_APP_ID",
              "MISSING_CAPABILITIES",
              "NO_ADMIN_ROLE_ERROR",
              "NOT_SAME_ASSET_GROUPS",
              "INVALID_POLICY_ID",
              "INVALID_POLICY_EXPRESSION",
              "INVALID_POLICY_PARAMETERS",
              "POLICY_ALREADY_ASSOCIATED_TO_APP",
              "POLICY_NAME_ALREADY_EXISTS",
              "INVALID_POLICY_IDENTIFIER",
              "POLICY_PREDEFINED_DELETION_NOT_ALLOWED",
              "POLICY_PREDEFINED_MODIFICATION_NOT_ALLOWED",
              "POLICY_DELETION_NOT_ALLOWED",
              "POLICY_INVALID_DATE_FORMAT",
              "POLICY_INVALID_SEVERITY_VALUE",
              "POLICY_INVALID_TECHNOLOGY_VALUE",
              "POLICY_OPERATION_NOT_ERROR",
              "POLICY_OPERATION_AND_ERROR",
              "POLICY_INVALID_EXPRESSION_DEPTH",
              "SANDBOX_ONLY_PRIVATE_CAN_BE_PROMOTE",
              "POLICY_INVALID_CWE_FORMAT",
              "POLICY_ASSOCIATION_LIMIT_REACHED",
              "APPLICATIONS_MISMATCH",
              "PAY_PER_APP_APPLICATION_CANNOT_BE_DELETED",
              "PAY_PER_APP_APPLICATION_CANNOT_BE_MODIFIED",
              "ENVIRONMENT_STATUS_ERROR",
              "INVALID_LICENSE",
              "USER_ALREADY_SUBSCRIBED",
              "REGISTERATION_FAILURE",
              "TRIAL_EXPIRED",
              "LICENSE_REQUIRED",
              "REPORT_FILE_TYPE_IS_NOT_SUPPORTED",
              "ODATA_QUERY_ERROR",
              "BLOCKED_EMAIL_DOMAIN",
              "LOGIN_USING_IBMID_CRED_DEPRECATED",
              "DOWNLOAD_TRIAL_SCAN_NOT_PERMITTED",
              "JOB_STATUS_CHANGE_ERROR",
              "INVALID_EMAIL_PATTERN",
              "INVALID_EMAIL_DOMAIN",
              "STICKY_STATUS_PERSONAL_SCAN",
              "STICKY_STATUS_MISSING_STATUS",
              "ISSUE_STATUS_NEW_DEPRECATED",
              "INVALID_WEBHOOK_IDENTIFIER",
              "INVALID_PRESENCE_IDENTIFIER",
              "INVALID_SCOPE_IDENTIFIER",
              "RESCAN_IAST_FORBIDDEN",
              "INVALID_SUBSCRIPTION_FOR_TECHNOLOGY",
              "SUBSCRIPTION_LIMIT_EXCEEDED",
              "USER_QUEUE_LIMIT_EXCEEDED",
              "DOMAIN_NO_ACCESS",
              "DOMAIN_INVALID_VERIFICATION_METHOD",
              "DOMAIN_IS_ALREADY_VERIFIED",
              "MOBILE_TECHNOLOGY_NOT_SUPPORTED",
              "DASTCONFIG_DOMAIN_MISMATCH",
              "INVALID_ID_OR_MISSING_CAPABILITIES",
              "ISSUES_UPDATE_LIMIT_EXCEEDED",
              "ASSETGROUP_NO_ACCESS",
              "USER_IS_ASSETGROUP_CONTACT",
              "PRESENCE_NO_ACCESS",
              "TOKEN_EXPIRED",
              "DAST_INVALID_TRAFFIC_FILES",
              "INVALID_SCANT_MANUALEXPLORE_TESTONLY",
              "INVALID_SCAN_WITH_TRAFFIC_CONFIG",
              "BUSINESS_UNIT_ALREADY_EXISTS",
              "BUSINESS_UNIT_DOES_NOT_EXIST",
              "BUSINESS_UNIT_IS_ASSOCIATED_WITH_APPS_ERROR",
              "BUSINESS_UNIT_UPDATE_APP_ERROR",
              "BUSINESS_UNITS_TO_MERGE_ARE_EQUAL",
              "INVALID_RECURRENCE",
              "TOO_MANY_ISSUES_FOR_THIS_ACTION",
              "INVALID_ZIP_FILE",
              "INVALID_XML_FILE",
              "INVALID_IMAGE_FILE",
              "AD_LOGIN_DISABLED",
              "INVALID_USR_PWD",
              "INTERNAL_ADMIN_INACTIVE",
              "USER_NOT_AUTHORIZED",
              "PASSWORD_EXPIRED",
              "AD_ACCOUNT_LOCKED_OUT",
              "CHANGE_ROLE_NOT_SUPPORTED",
              "SCAN_EXECUTIONS_SCAN_LIMIT_EXCEEDED",
              "SCANS_PER_APPLICATION_LIMIT_EXCEEDED",
              "ISSUES_PER_APPLICATION_LIMIT_EXCEEDED",
              "NO_METAL_SUBSCRIPTION",
              "TECHNOLOGIES_ALREAY_SET",
              "PROVIDED_LIST_IS_TOO_LONG",
              "INVALID_JSON_FILE",
              "WRONG_CREDENTIALS",
              "INVITATION_REQUIRED",
              "REGISTER_USERS_MANUAL_ONBOARD",
              "RESCAN_SAST_FORBIDDEN",
              "SCA_DOESNT_SUPPORT_IFA",
              "SCA_DOESNT_SUPPORT_OPEN_SOURCE_FILES",
              "ENCRYPTED_DAST_FILE",
              "DOWNLOADING_FILE_FAILED",
              "RESOURCE_NOT_FOUND",
              "SOURCE_IP_RESTRICTION_VIOLATION",
              "SOURCE_IP_MISMATCH",
              "PDF_FORMAT_NOT_SUPPORTED",
              "FILE_NOT_FOUND",
              "INVALID_TECHNOLOGIES_FOR_SUBSCRIPTION",
              "SBOM_RAW_DATA_NOT_AVAILABLE",
              "APP_SCANS_LIMIT_EXCEEDED",
              "REPORT_SIGNITURE_UNVERIFIED",
              "SIGNATURE_UNVERIFIED",
              "DOMAIN_NOT_FOUND",
              "PROVIDED_URL_DOMAIN_IS_INVALID",
              "PROVIDED_IP_IS_INVALID",
              "DOMAIN_VERIFICATION_IS_NOT_REQUIRED_IN_YOUR_ORG",
              "DOMAIN_VERIFICATION_IS_REQUIRED_IN_YOUR_ORG",
              "DOMAIN_ALREADY_BLOCKED",
              "PARENT_DOMAIN_IS_ALREADY_BLOCKED",
              "DOMAIN_ALREADY_ALLOWED",
              "PARENT_DOMAIN_IS_ALREADY_ALLOWED",
              "SUB_DOMAINS_DELETED",
              "THIS_OPERATION_WILL_EFFECT_THESE_DOMAINS_ARE_YOU_SURE_YOU_WANT_TO_BLOCK_IT",
              "YOUR_ORGANIZATION_DOESNT_ALLOW_ASSOCIATING_DOMAIN_TO_ASSET_GROUPS",
              "SCA_STATIC_ONLY_ERROR",
              "STATIC_SCA_ONLY_ERROR",
              "REPO_NO_ACCESS",
              "REPO_SIGNATURE_INVALID",
              "FILE_NOT_ALLOWED",
              "SCA_DOESNT_SUPPORT_REPOSITORY",
              "SAST_RECURRENCE_NO_GIT",
              "DEMO_SCAN_NO_RECURRENCE",
              "THIS_DOMAIN_IS_FOR_OUR_DEMO_SITE_AND_IS_VERIFIED_BY_DEFAULT",
              "INVALID_ASENC_FILE",
              "INVALID_USER_PERMISSTION",
              "INVALID_ASYMETRIC_KEY",
              "TOO_MANY_USER_PREFERENCES",
              "INVALID_OPEN_API_FILE",
              "INVALID_EXD_FILE",
              "SEQUENCEDOMAINS_DOES_NOT_MATCH_STRATINGURL_DOMAIN",
              "SCAN_TEMPLATE_MISSING"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiKey": {
        "required": [
          "KeyId",
          "KeySecret"
        ],
        "type": "object",
        "properties": {
          "KeyId": {
            "minLength": 1,
            "type": "string"
          },
          "KeySecret": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ApiKeyInfo": {
        "type": "object",
        "properties": {
          "KeyId": {
            "type": "string",
            "nullable": true
          },
          "KeySecret": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AppCommentModel": {
        "type": "object",
        "properties": {
          "SourceType": {
            "enum": [
              "Issue",
              "FixGroup"
            ],
            "type": "string"
          },
          "SourceId": {
            "type": "string",
            "format": "uuid"
          },
          "SourceName": {
            "type": "string",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          }
        },
        "additionalProperties": false
      },
      "AppCommentModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppCommentModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppWithIssuesModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "IssuesCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ApplicationCreateModel": {
        "required": [
          "AssetGroupId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BusinessImpact": {
            "enum": [
              "Unspecified",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "BusinessUnitId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "type": "string",
            "nullable": true
          },
          "TestingStatus": {
            "enum": [
              "NotStarted",
              "InProgress",
              "Completed"
            ],
            "type": "string",
            "nullable": true
          },
          "Hosts": {
            "type": "string",
            "nullable": true
          },
          "CollateralDamagePotential": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "LowMedium",
              "MediumHigh",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "TargetDistribution": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "ConfidentialityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "IntegrityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "AvailabilityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "Tester": {
            "type": "string",
            "nullable": true
          },
          "BusinessOwner": {
            "type": "string",
            "nullable": true
          },
          "DevelopmentContact": {
            "type": "string",
            "nullable": true
          },
          "PreferredOfferingType": {
            "enum": [
              "None",
              "ScanExecution",
              "Applications"
            ],
            "type": "string",
            "nullable": true
          },
          "AutoDeleteExceededScans": {
            "type": "boolean"
          },
          "PresencesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "UseOnlyAppPresences": {
            "type": "boolean"
          },
          "AddedToAssetGroupBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "AddedToAssetGroupAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OrgCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgCustomFieldModel"
            },
            "nullable": true
          },
          "Name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "AssetGroupId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ApplicationElementsSettings": {
        "type": "object",
        "properties": {
          "EnableAutomaticFormFill": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "RiskRating": {
            "enum": [
              "Unknown",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "CriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "HighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "MediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "LowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "InformationalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "IssuesInProgress": {
            "type": "integer",
            "format": "int32"
          },
          "MaxSeverity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "CorrelationState": {
            "enum": [
              "None",
              "Active",
              "InProgress"
            ],
            "type": "string"
          },
          "RR_MaxSeverity": {
            "type": "integer",
            "format": "int32"
          },
          "AssetGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "BusinessImpact": {
            "enum": [
              "Unspecified",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "BusinessUnit": {
            "type": "string",
            "nullable": true
          },
          "BusinessUnitId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "type": "string",
            "nullable": true
          },
          "TestingStatus": {
            "enum": [
              "NotStarted",
              "InProgress",
              "Completed"
            ],
            "type": "string",
            "nullable": true
          },
          "Hosts": {
            "type": "string",
            "nullable": true
          },
          "CollateralDamagePotential": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "LowMedium",
              "MediumHigh",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "TargetDistribution": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "ConfidentialityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "IntegrityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "AvailabilityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "Tester": {
            "type": "string",
            "nullable": true
          },
          "BusinessOwner": {
            "type": "string",
            "nullable": true
          },
          "DevelopmentContact": {
            "type": "string",
            "nullable": true
          },
          "PreferredOfferingType": {
            "enum": [
              "None",
              "ScanExecution",
              "Applications"
            ],
            "type": "string",
            "nullable": true
          },
          "AssetGroupName": {
            "type": "string",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "LastComment": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "NewIssues": {
            "type": "integer",
            "format": "int32"
          },
          "OpenIssues": {
            "type": "integer",
            "format": "int32"
          },
          "TotalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "OverallCompliance": {
            "type": "boolean",
            "nullable": true
          },
          "ComplianceStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceStatus"
            },
            "nullable": true
          },
          "CanBeDeleted": {
            "type": "boolean"
          },
          "LockedToSubscription": {
            "type": "boolean"
          },
          "TotalScans": {
            "type": "integer",
            "format": "int32"
          },
          "NScanExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "HasExceedingIssuesNumber": {
            "type": "boolean"
          },
          "HasExceedingScansNumber": {
            "type": "boolean"
          },
          "AutoDeleteExceededScans": {
            "type": "boolean"
          },
          "Presences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Presence"
            },
            "nullable": true
          },
          "UseOnlyAppPresences": {
            "type": "boolean"
          },
          "AddedToAssetGroupBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "AddedToAssetGroupAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanTechnologies": {
            "enum": [
              "NONE",
              "DAST",
              "SAST",
              "IAST",
              "SCA"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ApplicationModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationResetModel": {
        "type": "object",
        "properties": {
          "DeleteIssues": {
            "type": "boolean",
            "default": true
          },
          "DeleteScans": {
            "type": "boolean",
            "default": false
          },
          "DeleteChartsData": {
            "type": "boolean",
            "default": false
          },
          "DeleteCustomFields": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ApplicationUpdateModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AssetGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "BusinessImpact": {
            "enum": [
              "Unspecified",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "BusinessUnitId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "type": "string",
            "nullable": true
          },
          "TestingStatus": {
            "enum": [
              "NotStarted",
              "InProgress",
              "Completed"
            ],
            "type": "string",
            "nullable": true
          },
          "Hosts": {
            "type": "string",
            "nullable": true
          },
          "CollateralDamagePotential": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "LowMedium",
              "MediumHigh",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "TargetDistribution": {
            "enum": [
              "NotDefined",
              "None",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "ConfidentialityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "IntegrityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "AvailabilityRequirement": {
            "enum": [
              "NotDefined",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "nullable": true
          },
          "Tester": {
            "type": "string",
            "nullable": true
          },
          "BusinessOwner": {
            "type": "string",
            "nullable": true
          },
          "DevelopmentContact": {
            "type": "string",
            "nullable": true
          },
          "PreferredOfferingType": {
            "enum": [
              "None",
              "ScanExecution",
              "Applications"
            ],
            "type": "string",
            "nullable": true
          },
          "AutoDeleteExceededScans": {
            "type": "boolean"
          },
          "PresencesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "UseOnlyAppPresences": {
            "type": "boolean"
          },
          "AddedToAssetGroupBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "AddedToAssetGroupAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OrgCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgCustomFieldModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetGroupModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppsCount": {
            "type": "integer",
            "format": "int32"
          },
          "UsersCount": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsDefault": {
            "type": "boolean"
          },
          "ContactPerson": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "IssuesStatusInheritance": {
            "enum": [
              "None",
              "Noise",
              "Fixed"
            ],
            "type": "string"
          },
          "EnableIssuesAutoClose": {
            "type": "boolean",
            "nullable": true
          },
          "DomainsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssetGroupModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetGroupModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetGroupMoveModel": {
        "type": "object",
        "properties": {
          "MoveUsers": {
            "type": "boolean",
            "default": true
          },
          "DeleteSourceAssetGroup": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "AssetGroupShortModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditAdditionalData": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "OldValue": {
            "type": "string",
            "nullable": true
          },
          "NewValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditEffectedEntity": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "EntityType": {
            "enum": [
              "Organization",
              "AssetGroup",
              "User",
              "UserRole",
              "App",
              "Scan",
              "ScanExecution",
              "Presence",
              "IssueBulk",
              "FixGroup",
              "Policy",
              "Session",
              "BusinessUnit",
              "Domain"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuditModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "OrgId": {
            "type": "string",
            "format": "uuid"
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "UserEmail": {
            "type": "string",
            "nullable": true
          },
          "UserId": {
            "type": "string",
            "nullable": true
          },
          "ChangeTime": {
            "type": "string",
            "format": "date-time"
          },
          "Action": {
            "enum": [
              "Login",
              "Create",
              "Update",
              "Delete"
            ],
            "type": "string"
          },
          "Activity": {
            "enum": [
              "Login",
              "Create",
              "Update",
              "Delete",
              "Reset",
              "Associate",
              "Disassociate",
              "CreateReport",
              "InviteUser",
              "Add",
              "Remove",
              "UpdateIssuesBulk",
              "DeleteScanExecutions",
              "BlockDomain",
              "AllowDomain"
            ],
            "type": "string"
          },
          "EntityType": {
            "enum": [
              "Organization",
              "AssetGroup",
              "User",
              "UserRole",
              "App",
              "Scan",
              "ScanExecution",
              "Presence",
              "IssueBulk",
              "FixGroup",
              "Policy",
              "Session",
              "BusinessUnit",
              "Domain"
            ],
            "type": "string",
            "nullable": true
          },
          "EntityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "EntityName": {
            "type": "string",
            "nullable": true
          },
          "AffectedEntity1": {
            "$ref": "#/components/schemas/AuditEffectedEntity"
          },
          "AffectedEntity2": {
            "$ref": "#/components/schemas/AuditEffectedEntity"
          }
        },
        "additionalProperties": false
      },
      "AuditModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasicCommentModel": {
        "type": "object",
        "properties": {
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BasicRoleInfo": {
        "type": "object",
        "properties": {
          "RoleId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "RoleName": {
            "type": "string",
            "nullable": true
          },
          "Capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasicUserInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BlockDomainRequestModel": {
        "type": "object",
        "properties": {
          "DomainModel": {
            "$ref": "#/components/schemas/BlockedDomainModel"
          },
          "Force": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BlockedDomainModel": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "DomainUrl": {
            "type": "string",
            "nullable": true
          },
          "UrlType": {
            "enum": [
              "Domain",
              "IpAddress"
            ],
            "type": "string"
          },
          "IncludeSubDomains": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BusinessUnitModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "NumApplications": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BusinessUnitModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessUnitModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoriesChartData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryData"
            },
            "nullable": true
          },
          "pallette": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PalleteItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryData": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "nullable": true
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Change": {
        "type": "object",
        "properties": {
          "Property": {
            "type": "string",
            "nullable": true
          },
          "OldValue": {
            "type": "string",
            "nullable": true
          },
          "NewValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChartAppsFilterAndTimeFrame": {
        "type": "object",
        "properties": {
          "AppsFilter": {
            "$ref": "#/components/schemas/ChartAppsFilterModel"
          },
          "ChartTimeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          }
        },
        "additionalProperties": false
      },
      "ChartAppsFilterModel": {
        "type": "object",
        "properties": {
          "AssetGroups": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "BusinessUnits": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "AppIds": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChartCreateModel": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/ChartFilterModel"
          },
          "ChartTimeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "Metrics": {
            "enum": [
              "RiskRating",
              "TestingStatus",
              "Issues",
              "MTTR",
              "ScanExecutions"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChartData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricInterval"
            },
            "nullable": true
          },
          "pallette": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PalleteItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChartFilterModel": {
        "type": "object",
        "properties": {
          "AppsFilter": {
            "$ref": "#/components/schemas/ChartAppsFilterModel"
          },
          "MinSeverity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommentModelResponse": {
        "type": "object",
        "properties": {
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          }
        },
        "additionalProperties": false
      },
      "CommentModelResponsePageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentModelResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunicationSettings": {
        "type": "object",
        "properties": {
          "ThreadNum": {
            "type": "integer",
            "description": "Number of threads",
            "format": "int32",
            "default": 10,
            "nullable": true
          },
          "ConnectionTimeout": {
            "type": "integer",
            "description": "Timeout in seconds",
            "format": "int32",
            "default": 10,
            "nullable": true
          },
          "UseAutomaticTimeout": {
            "type": "boolean",
            "description": "Adjust communication timeout automatically during the scan",
            "default": false,
            "nullable": true
          },
          "MaxRequestsIn": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "nullable": true
          },
          "MaxRequestsTimeFrame": {
            "type": "integer",
            "format": "int32",
            "default": 10,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplianceStatus": {
        "type": "object",
        "properties": {
          "PolicyId": {
            "type": "string",
            "format": "uuid"
          },
          "Enabled": {
            "type": "boolean"
          },
          "Name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AssocitedBy": {
            "type": "string",
            "nullable": true
          },
          "Compliant": {
            "type": "boolean"
          },
          "Category": {
            "enum": [
              "Custom",
              "Security",
              "Regulation",
              "IndustryStandard"
            ],
            "type": "string"
          },
          "Parameters": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorrelationGroupModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ApplicationId": {
            "type": "string",
            "format": "uuid"
          },
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "LibraryName": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Api": {
            "type": "string",
            "nullable": true
          },
          "IssuesCount": {
            "type": "integer",
            "format": "int32"
          },
          "IssueTypeId": {
            "type": "string",
            "nullable": true
          },
          "IssueType": {
            "type": "string",
            "nullable": true
          },
          "IncludeDast": {
            "type": "boolean"
          },
          "IncludeSast": {
            "type": "boolean"
          },
          "IncludeIast": {
            "type": "boolean"
          },
          "IncludeSca": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CorrelationGroupModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorrelationGroupModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CountPerFinalStatus": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "Completed",
              "Failed",
              "Other"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CountPerTechnologies": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Technologies": {
            "enum": [
              "NONE",
              "DAST",
              "SAST",
              "IAST",
              "SCA"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldRequest": {
        "required": [
          "ColumnName",
          "DefaultValue",
          "ValueType"
        ],
        "type": "object",
        "properties": {
          "ColumnName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ValueType": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "DefaultValue": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DastScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          },
          "StartingUrl": {
            "type": "string",
            "nullable": true
          },
          "LoginUser": {
            "type": "string",
            "nullable": true
          },
          "NVisitedPages": {
            "type": "integer",
            "format": "int32"
          },
          "NUnvisitedPages": {
            "type": "integer",
            "format": "int32"
          },
          "NTestedEntities": {
            "type": "integer",
            "format": "int32"
          },
          "NEntities": {
            "type": "integer",
            "format": "int32"
          },
          "NRequestsSent": {
            "type": "integer",
            "format": "int64"
          },
          "IncrementalBaseJobId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "IsIncrementalRetest": {
            "type": "boolean",
            "nullable": true
          },
          "ScanLogUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DastScanModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "NextScheduledRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "nullable": true
          },
          "AppName": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "LatestExecution": {
            "$ref": "#/components/schemas/DastScanExecutionModel"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "NExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "DeletedAllowed": {
            "type": "boolean"
          },
          "OfferingTriggered": {
            "type": "boolean"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "RescanAllowed": {
            "type": "boolean"
          },
          "Presence": {
            "$ref": "#/components/schemas/Presence"
          },
          "IastAgentStatus": {
            "enum": [
              "None",
              "Active",
              "KeyNeverUsed",
              "Inactive"
            ],
            "type": "string"
          },
          "IastAgentType": {
            "enum": [
              "Java",
              "DotNet",
              "NodeJS",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string",
            "nullable": true
          },
          "IastConnLostStopTimer": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "HTrial",
              "Applications",
              "ScanExecution",
              "AnalyzerConcurrent",
              "ConsultantServices",
              "Premium",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser"
            ],
            "type": "string"
          },
          "IsUploadedFile": {
            "type": "boolean"
          },
          "ParsedFromUploadedFile": {
            "type": "boolean"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "UseTestOptimizer": {
            "type": "boolean"
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "IsDemoScan": {
            "type": "boolean"
          },
          "ExpirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanConfiguration": {
            "$ref": "#/components/schemas/DastUserScanConfigurationExtended"
          },
          "LoginConfigurationType": {
            "enum": [
              "None",
              "LoginSequence",
              "LoginFile",
              "AutomaticLogin",
              "LoginRequests",
              "ApiKeyLogin"
            ],
            "type": "string"
          },
          "TestOnly": {
            "type": "boolean"
          },
          "TestOperation": {
            "enum": [
              "None",
              "Retest",
              "ContinueTest",
              "ReportOnly"
            ],
            "type": "string"
          },
          "ManualExploreFilesList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "MultiStepFilesList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "IsHttpAuth": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DastUserScanConfigurationExtended": {
        "type": "object",
        "properties": {
          "StartingUrl": {
            "type": "string",
            "nullable": true
          },
          "LoginUser": {
            "type": "string",
            "nullable": true
          },
          "LoginPassword": {
            "type": "string",
            "nullable": true
          },
          "ExtraField": {
            "type": "string",
            "nullable": true
          },
          "HttpAuthUserName": {
            "type": "string",
            "nullable": true
          },
          "HttpAuthPassword": {
            "type": "string",
            "nullable": true
          },
          "HttpAuthDomain": {
            "type": "string",
            "nullable": true
          },
          "OtpSecretKey": {
            "type": "string",
            "nullable": true
          },
          "OtpLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OtpHashType": {
            "enum": [
              "None",
              "Sha1",
              "Sha256",
              "Sha512"
            ],
            "type": "string"
          },
          "OtpTimeStep": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OtpHttpParameters": {
            "type": "string",
            "nullable": true
          },
          "ThreadNum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ConnectionTimeout": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "UseAutomaticTimeout": {
            "type": "boolean",
            "nullable": true
          },
          "MaxRequestsIn": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MaxRequestsTimeFrame": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TestPolicy": {
            "type": "string",
            "nullable": true
          },
          "PredefinedTestPolicy": {
            "enum": [
              "Complete",
              "Default",
              "OwaspTop10Api",
              "OwaspTop10",
              "ProductionSite"
            ],
            "type": "string",
            "nullable": true
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "AllowedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ShouldScanBelowThisDirectory": {
            "type": "boolean",
            "nullable": true
          },
          "UseCaseSensitivePaths": {
            "type": "boolean",
            "nullable": true
          },
          "TestLoginPages": {
            "type": "boolean",
            "nullable": true
          },
          "TestLoginPagesWithoutSessionIds": {
            "type": "boolean",
            "nullable": true
          },
          "TestLogoutPages": {
            "type": "boolean",
            "nullable": true
          },
          "DetectVulnerableComponents": {
            "type": "boolean",
            "nullable": true
          },
          "EnableAutomaticFormFill": {
            "type": "boolean"
          },
          "ExclusionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExcludeExceptionModel"
            },
            "nullable": true
          },
          "OpenAPIBaseUrl": {
            "type": "string",
            "nullable": true
          },
          "OpenAPIUrl": {
            "type": "string",
            "nullable": true
          },
          "OpenAPIFileId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "FormFillParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiLoginKey"
            },
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "PostmanCollectionJsonFileName": {
            "type": "string",
            "nullable": true
          },
          "PostmanEnvironmentJsonFileName": {
            "type": "string",
            "nullable": true
          },
          "PostmanGlobalJsonFileName": {
            "type": "string",
            "nullable": true
          },
          "PostmanAdditionalZipFileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataPoint": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DateValues": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteDomainResult": {
        "type": "object",
        "properties": {
          "DomainId": {
            "type": "integer",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteDomainsResult": {
        "type": "object",
        "properties": {
          "Failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteDomainResult"
            },
            "nullable": true
          },
          "Deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeleteDomainResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainModel": {
        "required": [
          "Domain"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Domain": {
            "minLength": 1,
            "type": "string"
          },
          "UrlType": {
            "enum": [
              "Domain",
              "IpAddress"
            ],
            "type": "string"
          },
          "IncludeSubDomains": {
            "type": "boolean"
          },
          "ReversedUrl": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "IsAccessLimitedForAssetGroups": {
            "type": "boolean"
          },
          "IsBlocked": {
            "type": "boolean"
          },
          "Enabled": {
            "type": "boolean",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Support",
              "Html",
              "Email",
              "DnsComparison",
              "Manually"
            ],
            "type": "string"
          },
          "Status": {
            "enum": [
              "None",
              "Verified",
              "Pending"
            ],
            "type": "string"
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "AddedBy": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastScanned": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AssetGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinAssetGroupModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DomainModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainOwnershipModel": {
        "type": "object",
        "properties": {
          "STP": {
            "type": "string",
            "nullable": true
          },
          "MailPrefix": {
            "enum": [
              "Admin",
              "Administrator",
              "HostMaster",
              "Root",
              "WebMaster",
              "PostMaster"
            ],
            "type": "string"
          },
          "Domain": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainOwnershipModelVerificationModel": {
        "type": "object",
        "properties": {
          "STP": {
            "type": "string",
            "nullable": true
          },
          "MailPrefix": {
            "enum": [
              "Admin",
              "Administrator",
              "HostMaster",
              "Root",
              "WebMaster",
              "PostMaster"
            ],
            "type": "string"
          },
          "Domain": {
            "type": "string",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditPolicyModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Expression": { }
        },
        "additionalProperties": false
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "FormatParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExcludeExceptionModel": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "Exclude",
              "Exception"
            ],
            "type": "string"
          },
          "IsRegEx": {
            "type": "boolean"
          },
          "Pattern": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExploreDataCounters": {
        "type": "object",
        "properties": {
          "Requests": {
            "type": "integer",
            "format": "int32"
          },
          "FailedRequests": {
            "type": "integer",
            "format": "int32"
          },
          "Parameters": {
            "type": "integer",
            "format": "int32"
          },
          "Cookies": {
            "type": "integer",
            "format": "int32"
          },
          "Headers": {
            "type": "integer",
            "format": "int32"
          },
          "Pages": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExploreItem": {
        "required": [
          "FileId"
        ],
        "type": "object",
        "properties": {
          "FileId": {
            "type": "string",
            "format": "uuid"
          },
          "MultiStep": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FixGroup": {
        "required": [
          "AppId",
          "DateCreated",
          "FixGroupType",
          "FixLocationEntityType",
          "Hash",
          "HashVersion",
          "Id",
          "IssueType",
          "IssueTypeId",
          "NIssues",
          "NOpenIssues",
          "StickyStatus",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "AppId": {
            "type": "string",
            "format": "uuid"
          },
          "FixGroupType": {
            "enum": [
              "OpenSourceLib",
              "FixLocation",
              "Api"
            ],
            "type": "string"
          },
          "Subject": {
            "minLength": 1,
            "type": "string"
          },
          "FixLocationEntityType": {
            "enum": [
              "None",
              "ImplementationOf",
              "UsageOf"
            ],
            "type": "string"
          },
          "Severity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "SeverityValue": {
            "type": "integer",
            "format": "int32"
          },
          "NIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenIssues": {
            "type": "integer",
            "format": "int32"
          },
          "IssueTypeId": {
            "minLength": 1,
            "type": "string"
          },
          "IssueType": {
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "StickyStatus": {
            "type": "boolean"
          },
          "File": {
            "type": "string",
            "nullable": true
          },
          "Line": {
            "type": "integer",
            "format": "int32"
          },
          "HashVersion": {
            "type": "integer",
            "format": "int32"
          },
          "Hash": {
            "minLength": 1,
            "type": "string"
          },
          "LibraryName": {
            "type": "string",
            "nullable": true
          },
          "LastComment": {
            "$ref": "#/components/schemas/BasicCommentModel"
          },
          "Language": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FixGroupPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixGroup"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FixGroupUpdate": {
        "type": "object",
        "properties": {
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "StickyStatus": {
            "type": "boolean",
            "nullable": true
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FlexNetLicenseModel": {
        "required": [
          "LicenseKey"
        ],
        "type": "object",
        "properties": {
          "LicenseKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GeneralScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GenericChartData": {
        "type": "object",
        "properties": {
          "Columns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "DataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimedDataPoints"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlobalEnvironmentInfo": {
        "type": "object",
        "properties": {
          "SiteUrl": {
            "type": "string",
            "nullable": true
          },
          "ScanServiceUrl": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "Region": {
            "type": "string",
            "nullable": true
          },
          "ExternalIDPMode": {
            "enum": [
              "Disabled",
              "AutoOnboard",
              "ManualOnboard",
              "GroupsAccess",
              "MapGroupsToRoles"
            ],
            "type": "string"
          },
          "GitHubAppUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HealthStatusModel": {
        "type": "object",
        "properties": {
          "HasDBAccess": {
            "type": "boolean"
          },
          "HasStorageAccess": {
            "type": "boolean"
          },
          "HasSMTPAccess": {
            "type": "boolean"
          },
          "HasLDAPAccess": {
            "type": "boolean"
          },
          "HasLicenseServerAccess": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpAuthSettings": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpContent": {
        "type": "object",
        "properties": {
          "Headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IastScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IastScanModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "NextScheduledRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "nullable": true
          },
          "AppName": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "LatestExecution": {
            "$ref": "#/components/schemas/IastScanExecutionModel"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "NExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "DeletedAllowed": {
            "type": "boolean"
          },
          "OfferingTriggered": {
            "type": "boolean"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "RescanAllowed": {
            "type": "boolean"
          },
          "Presence": {
            "$ref": "#/components/schemas/Presence"
          },
          "IastAgentStatus": {
            "enum": [
              "None",
              "Active",
              "KeyNeverUsed",
              "Inactive"
            ],
            "type": "string"
          },
          "IastAgentType": {
            "enum": [
              "Java",
              "DotNet",
              "NodeJS",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string",
            "nullable": true
          },
          "IastConnLostStopTimer": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "HTrial",
              "Applications",
              "ScanExecution",
              "AnalyzerConcurrent",
              "ConsultantServices",
              "Premium",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser"
            ],
            "type": "string"
          },
          "IsUploadedFile": {
            "type": "boolean"
          },
          "ParsedFromUploadedFile": {
            "type": "boolean"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "UseTestOptimizer": {
            "type": "boolean"
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "IsDemoScan": {
            "type": "boolean"
          },
          "ExpirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Agentkey": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ImportAppResultModel": {
        "type": "object",
        "properties": {
          "NCreated": {
            "type": "integer",
            "format": "int32"
          },
          "NModified": {
            "type": "integer",
            "format": "int32"
          },
          "NSkipped": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImportIssueStatusModel": {
        "type": "object",
        "properties": {
          "Imported": {
            "type": "integer",
            "format": "int32"
          },
          "Updated": {
            "type": "integer",
            "format": "int32"
          },
          "Skipped": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "InviteResult": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "nullable": true
          },
          "InviteStatus": {
            "enum": [
              "Success",
              "BlockedEmail",
              "InvalidEmail",
              "AlreadyExist",
              "Failed",
              "EmailSentRecently"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "InviteUsersModel": {
        "type": "object",
        "properties": {
          "Emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "AssetGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "RoleId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "IsValidUrlData": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IsValidUrlResponse": {
        "type": "object",
        "properties": {
          "IsValid": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IssueChangeSet": {
        "type": "object",
        "properties": {
          "Changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            },
            "nullable": true
          },
          "ChangedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ChangedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "ScanExecution": {
            "$ref": "#/components/schemas/ScanExecutionInfo"
          }
        },
        "additionalProperties": false
      },
      "IssueMergeModel": {
        "type": "object",
        "properties": {
          "NewIssues": {
            "type": "integer",
            "format": "int32"
          },
          "MergedIssues": {
            "type": "integer",
            "format": "int32"
          },
          "ReopenedIssues": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IssueModel": {
        "required": [
          "Id",
          "IssueTypeId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Language": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string"
          },
          "IssueType": {
            "type": "string",
            "nullable": true
          },
          "Location": {
            "type": "string",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CallingMethod": {
            "type": "string",
            "nullable": true
          },
          "IsNewInScope": {
            "type": "boolean"
          },
          "PackageId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "AppPackageId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "LibraryName": {
            "type": "string",
            "nullable": true
          },
          "LibraryVersion": {
            "type": "string",
            "nullable": true
          },
          "ScaTechnology": {
            "type": "string",
            "nullable": true
          },
          "FGStatus": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "IsSticky": {
            "type": "boolean"
          },
          "ApplicationId": {
            "type": "string",
            "format": "uuid"
          },
          "FixGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Api": {
            "type": "string",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "nullable": true
          },
          "Context": {
            "type": "string",
            "nullable": true
          },
          "AppscanVulnId": {
            "type": "string",
            "nullable": true
          },
          "CallingLine": {
            "type": "string",
            "nullable": true
          },
          "Class": {
            "type": "string",
            "nullable": true
          },
          "Cve": {
            "type": "string",
            "nullable": true
          },
          "CveId": {
            "type": "string",
            "nullable": true
          },
          "CvePublishDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "DetailsUrl": {
            "type": "string",
            "nullable": true
          },
          "Cvss": {
            "type": "string",
            "nullable": true
          },
          "CvssVersion": {
            "enum": [
              "None",
              "Cvss20",
              "Cvss30",
              "Cvss31"
            ],
            "type": "string",
            "nullable": true
          },
          "DiscoveryMethod": {
            "type": "string",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "nullable": true
          },
          "Element": {
            "type": "string",
            "nullable": true
          },
          "ElementType": {
            "type": "string",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Host": {
            "type": "string",
            "nullable": true
          },
          "IssueTypeId": {
            "minLength": 1,
            "type": "string"
          },
          "IssueTypeGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "IssueXml": {
            "type": "string",
            "nullable": true
          },
          "Line": {
            "type": "string",
            "nullable": true
          },
          "Package": {
            "type": "string",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "nullable": true
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "Scheme": {
            "type": "string",
            "nullable": true
          },
          "SeverityValue": {
            "type": "integer",
            "format": "int32"
          },
          "CorrelationGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "SourceFile": {
            "type": "string",
            "nullable": true
          },
          "LastComment": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Scanner": {
            "type": "string",
            "nullable": true
          },
          "ScanName": {
            "type": "string",
            "nullable": true
          },
          "Cwe": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ThreatClassId": {
            "type": "string",
            "nullable": true
          },
          "DiffResult": {
            "enum": [
              "NoChange",
              "Added",
              "Removed"
            ],
            "type": "string"
          },
          "ApiVulnName": {
            "type": "string",
            "nullable": true
          },
          "RemediationId": {
            "type": "string",
            "nullable": true
          },
          "SourceFileUri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IssueModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IssuesReportJob": {
        "type": "object",
        "properties": {
          "OdataFilter": {
            "type": "string",
            "nullable": true
          },
          "ApplyPolicies": {
            "enum": [
              "None",
              "All",
              "Select"
            ],
            "type": "string"
          },
          "SelectPolicyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobsStatisticsModel": {
        "type": "object",
        "properties": {
          "ScanTechnology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "MeasureTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "DateValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateValues"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KPIData": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "number",
            "format": "double"
          },
          "TrendPercent": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LibraryModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "LibSha1": {
            "type": "string",
            "nullable": true
          },
          "LibraryName": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "NumberOfLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "HighestIssueSeverity": {
            "enum": [
              "Undetermined",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "nullable": true
          },
          "FirstFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "NumOfIssues": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseLibraryModel": {
        "type": "object",
        "properties": {
          "PackageId": {
            "type": "string",
            "format": "uuid"
          },
          "AppPackageId": {
            "type": "string",
            "format": "uuid"
          },
          "Sha1": {
            "type": "string",
            "nullable": true
          },
          "LibSha1": {
            "type": "string",
            "nullable": true
          },
          "LibraryName": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "NumberOfLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "LicenseId": {
            "type": "integer",
            "format": "int64"
          },
          "RiskLevel": {
            "enum": [
              "Undefined",
              "Unknown",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string"
          },
          "CopyrightRiskScore": {
            "enum": [
              "UNDEFINED",
              "ONE",
              "TWO",
              "THREE",
              "FOUR",
              "FIVE",
              "SIX",
              "SEVEN"
            ],
            "type": "string"
          },
          "PatentRiskScore": {
            "enum": [
              "UNDEFINED",
              "ONE",
              "TWO",
              "THREE",
              "FOUR"
            ],
            "type": "string"
          },
          "Linking": {
            "enum": [
              "Undefined",
              "Viral",
              "Non_Viral",
              "Dynamic"
            ],
            "type": "string"
          },
          "CopyLeft": {
            "enum": [
              "Undefined",
              "No",
              "Partial",
              "Full"
            ],
            "type": "string"
          },
          "RoyaltyFree": {
            "enum": [
              "Yes",
              "Conditional",
              "No",
              "Undefined"
            ],
            "type": "string"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "LicenseName": {
            "type": "string",
            "nullable": true
          },
          "FirstFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PackageLocation": {
            "type": "string",
            "nullable": true
          },
          "NumOfIssues": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "Discovered",
              "Rediscovered",
              "Removed"
            ],
            "type": "string"
          },
          "Technology": {
            "type": "string",
            "nullable": true
          },
          "Malware": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LicenseLibraryModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseLibraryModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseModel": {
        "type": "object",
        "properties": {
          "LicenseId": {
            "type": "integer",
            "format": "int64"
          },
          "RiskLevel": {
            "enum": [
              "Undefined",
              "Unknown",
              "Low",
              "Medium",
              "High"
            ],
            "type": "string"
          },
          "CopyrightRiskScore": {
            "enum": [
              "UNDEFINED",
              "ONE",
              "TWO",
              "THREE",
              "FOUR",
              "FIVE",
              "SIX",
              "SEVEN"
            ],
            "type": "string"
          },
          "PatentRiskScore": {
            "enum": [
              "UNDEFINED",
              "ONE",
              "TWO",
              "THREE",
              "FOUR"
            ],
            "type": "string"
          },
          "Linking": {
            "enum": [
              "Undefined",
              "Viral",
              "Non_Viral",
              "Dynamic"
            ],
            "type": "string"
          },
          "CopyLeft": {
            "enum": [
              "Undefined",
              "No",
              "Partial",
              "Full"
            ],
            "type": "string"
          },
          "RoyaltyFree": {
            "enum": [
              "Yes",
              "Conditional",
              "No",
              "Undefined"
            ],
            "type": "string"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "LicenseName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseReportJob": {
        "required": [
          "Configuration"
        ],
        "type": "object",
        "properties": {
          "OdataFilter": {
            "type": "string",
            "nullable": true
          },
          "Configuration": {
            "$ref": "#/components/schemas/LicenseReportOptions"
          }
        },
        "additionalProperties": false
      },
      "LicenseReportOptions": {
        "type": "object",
        "properties": {
          "ReportFileType": {
            "enum": [
              "Pdf",
              "Html",
              "Xml",
              "Csv",
              "Sarif"
            ],
            "type": "string"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginSettings": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "ExtraField": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hcn": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoDeployment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "fingerprints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoEntitlement": {
        "type": "object",
        "properties": {
          "validity": {
            "$ref": "#/components/schemas/MHSPasetoEntitlementValidity"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "item": {
            "$ref": "#/components/schemas/MHSPasetoEntitlementItem"
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoEntitlementItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoEntitlementValidity": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoFeature": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MHSPasetoEntitlement"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MHSPasetoPayloadV1": {
        "type": "object",
        "properties": {
          "iat": {
            "type": "string",
            "nullable": true
          },
          "aud": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MHSPasetoFeature"
            },
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/MHSPasetoAccount"
          },
          "deployment": {
            "$ref": "#/components/schemas/MHSPasetoDeployment"
          }
        },
        "additionalProperties": false
      },
      "MHSPayloadAscpSignature": {
        "type": "object",
        "properties": {
          "MHSError": {
            "enum": [
              "None",
              "GeneralError",
              "InvalidInput",
              "MissingCapabilities",
              "MHSLicenseGeneralStructureUnrecognized",
              "MHSLicenseCertificateInvalid",
              "MHSLicensePasetoSignatureInvalid",
              "MHSLicensePasetoRawPayloadUnrecognized",
              "MHSLicenseInvalidAs360Fingerprint",
              "MHSLicenseDeploymentIdMismatch",
              "MHSLicenseIssuedEarlierThanCurrentlyUsed",
              "MHSLicenseHasNoRelevantEntitlements",
              "MHSLicenseWasAlreadyUploaded",
              "MHSLicenseOldFeatureIsMissing",
              "MHSLicenseChangingPreviousMhsValue",
              "MHSLicenseWasIssuedTooLongAgo"
            ],
            "type": "string"
          },
          "MHSSignature": {
            "type": "string",
            "nullable": true
          },
          "Payload": {
            "$ref": "#/components/schemas/MHSPasetoPayloadV1"
          }
        },
        "additionalProperties": false
      },
      "MetricData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MetricInterval": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricData"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinAssetGroupModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppsCount": {
            "type": "integer",
            "format": "int32"
          },
          "UsersCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MinPresenceData": {
        "type": "object",
        "properties": {
          "PresenceName": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Active",
              "NeverUsed",
              "KeyExpired",
              "KeyNeverUsed",
              "Inactive",
              "Disable"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MinScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "IncrementalBaseJobId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "IsIncrementalRetest": {
            "type": "boolean",
            "nullable": true
          },
          "GitRepository": {
            "type": "string",
            "nullable": true
          },
          "GitBranch": {
            "type": "string",
            "nullable": true
          },
          "SupportModeEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MinScanModel": {
        "type": "object",
        "properties": {
          "AppId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "IastAgentType": {
            "enum": [
              "Java",
              "DotNet",
              "NodeJS",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string",
            "nullable": true
          },
          "IastAgentStatus": {
            "enum": [
              "None",
              "Active",
              "KeyNeverUsed",
              "Inactive"
            ],
            "type": "string"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "AppName": {
            "type": "string",
            "nullable": true
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "NumberOfExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "NextScheduledRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LatestExecution": {
            "$ref": "#/components/schemas/MinScanExecutionModel"
          },
          "Presence": {
            "$ref": "#/components/schemas/MinPresenceData"
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "RescanAllowed": {
            "type": "boolean"
          },
          "ParsedFromUploadedFile": {
            "type": "boolean"
          },
          "DeletedAllowed": {
            "type": "boolean"
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "EnableMailNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "AssetGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "BusinessUnitId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinScanModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinScanModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonitoredServiceModel": {
        "type": "object",
        "properties": {
          "FirstCheck": {
            "type": "string",
            "format": "date-time"
          },
          "LastCheck": {
            "type": "string",
            "format": "date-time"
          },
          "ServiceType": {
            "enum": [
              "ASCP",
              "SAST",
              "DAST",
              "SCA"
            ],
            "type": "string"
          },
          "Status": {
            "enum": [
              "Operational",
              "Overloaded",
              "OutOfService",
              "OutOfOrder",
              "MonitoringDisabled"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MonitoredServiceModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NameValuePair": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Value": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewAssetGroupModel": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "IssuesStatusInheritance": {
            "enum": [
              "None",
              "Noise",
              "Fixed"
            ],
            "type": "string",
            "nullable": true
          },
          "ContactUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "EnableIssuesAutoClose": {
            "type": "boolean",
            "nullable": true
          },
          "Name": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewBusinessUnitModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppIdsToAdd": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewChartModel": {
        "type": "object",
        "properties": {
          "AssetGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "BusinessUnit": {
            "type": "string",
            "nullable": true
          },
          "ChartTimeFrame": {
            "$ref": "#/components/schemas/TimeFrame"
          },
          "Metrics": {
            "enum": [
              "RiskRating",
              "TestingStatus",
              "Issues",
              "MTTR",
              "ScanExecutions"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewDastScan": {
        "required": [
          "AppId",
          "ScanName"
        ],
        "type": "object",
        "properties": {
          "ScanName": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "format": "uuid"
          },
          "Execute": {
            "type": "boolean"
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "Personal": {
            "type": "boolean"
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ScanOrTemplateFileId": {
            "type": "string",
            "description": "File ID of AppScan Scan or Scan Template file that was uploaded",
            "format": "uuid",
            "nullable": true
          },
          "LoginSequenceFileId": {
            "type": "string",
            "description": "File ID of login sequence file that was uploaded",
            "format": "uuid",
            "nullable": true
          },
          "ScanConfiguration": {
            "$ref": "#/components/schemas/NewDastScanConfiguration"
          },
          "ExploreItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExploreItem"
            },
            "description": "List of file ids for files with explore data (dast.config)",
            "nullable": true
          },
          "PostmanCollectionFiles": {
            "$ref": "#/components/schemas/PostmanCollectionFiles"
          },
          "PresenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "IncludeVerifiedDomains": {
            "type": "boolean"
          },
          "Recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "OnlyFullResults": {
            "type": "boolean"
          },
          "TestOperation": {
            "enum": [
              "None",
              "Retest",
              "ContinueTest",
              "ReportOnly"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewDastScanConfiguration": {
        "type": "object",
        "properties": {
          "Target": {
            "$ref": "#/components/schemas/TargetSettings"
          },
          "Login": {
            "$ref": "#/components/schemas/LoginSettings"
          },
          "HttpAuth": {
            "$ref": "#/components/schemas/HttpAuthSettings"
          },
          "Otp": {
            "$ref": "#/components/schemas/OneTimePassword"
          },
          "Communication": {
            "$ref": "#/components/schemas/CommunicationSettings"
          },
          "Tests": {
            "$ref": "#/components/schemas/TestsSettings"
          },
          "ApplicationElements": {
            "$ref": "#/components/schemas/ApplicationElementsSettings"
          },
          "OpenAPI": {
            "$ref": "#/components/schemas/OpenAPIConfiguration"
          }
        },
        "additionalProperties": false
      },
      "NewExternalUserModel": {
        "required": [
          "FirstName",
          "LastName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "LastName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "PhoneNumber": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "CountryCode": {
            "maxLength": 20,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "Password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string"
          },
          "ProtectedUserName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewIASTKey": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewIastScan": {
        "required": [
          "AppId",
          "ScanName"
        ],
        "type": "object",
        "properties": {
          "ScanName": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "format": "uuid"
          },
          "Execute": {
            "type": "boolean"
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "Personal": {
            "type": "boolean"
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ConnLostStopTimer": {
            "maximum": 2147483647,
            "minimum": 30,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AgentType": {
            "enum": [
              "Java",
              "DotNet",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewOrg": {
        "required": [
          "Email"
        ],
        "type": "object",
        "properties": {
          "Email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "LicenseKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "OrgName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewPolicyModel": {
        "required": [
          "Expression",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Expression": { }
        },
        "additionalProperties": false
      },
      "NewPresence": {
        "required": [
          "PresenceName"
        ],
        "type": "object",
        "properties": {
          "PresenceName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewRoleModel": {
        "required": [
          "Capabilities",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "ExternalGroupName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        },
        "additionalProperties": false
      },
      "NewScaScan": {
        "required": [
          "AppId",
          "ScanName"
        ],
        "type": "object",
        "properties": {
          "ScanName": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "format": "uuid"
          },
          "Execute": {
            "type": "boolean"
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "Personal": {
            "type": "boolean"
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ApplicationFileId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "NewStaticScan": {
        "required": [
          "AppId",
          "ScanName"
        ],
        "type": "object",
        "properties": {
          "ScanName": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "format": "uuid"
          },
          "Execute": {
            "type": "boolean"
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "Personal": {
            "type": "boolean"
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ApplicationFileId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "RepositoryDetails": {
            "$ref": "#/components/schemas/RepoDetails"
          },
          "Recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          }
        },
        "additionalProperties": false
      },
      "NewUserAccount": {
        "required": [
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "LastName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "OrgName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "Password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "nullable": true
          },
          "Signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewWebhook": {
        "required": [
          "Event",
          "PresenceId",
          "Uri"
        ],
        "type": "object",
        "properties": {
          "PresenceId": {
            "type": "string",
            "format": "uuid"
          },
          "Uri": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "Global": {
            "type": "boolean"
          },
          "AssetGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Event": {
            "enum": [
              "ScanExecutionCompleted",
              "ApplicationUpdated",
              "ScaneExecutionCompleted"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OnBoardResult": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "OnBoardStatus": {
            "enum": [
              "Success",
              "NotFound",
              "Ambiguous",
              "AlreadyExist",
              "Failed"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OnBoardUsersModel": {
        "type": "object",
        "properties": {
          "ExternalIdType": {
            "enum": [
              "Username",
              "Email"
            ],
            "type": "string"
          },
          "ExternalUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "AssetGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "RoleId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "OneTimePassword": {
        "required": [
          "HashType",
          "Length",
          "SecretKey",
          "TimeStep"
        ],
        "type": "object",
        "properties": {
          "SecretKey": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string"
          },
          "Length": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "HashType": {
            "enum": [
              "None",
              "Sha1",
              "Sha256",
              "Sha512"
            ],
            "type": "string"
          },
          "TimeStep": {
            "maximum": 100000,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "HttpParameters": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenAPIConfiguration": {
        "type": "object",
        "properties": {
          "BaseUrl": {
            "type": "string",
            "description": "Base url of the swagger endpoints",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "Url of the swagger file",
            "nullable": true
          },
          "FileId": {
            "type": "string",
            "description": "Id of the uploaded swagger json/yml file",
            "format": "uuid",
            "nullable": true
          },
          "LoginKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiLoginKey"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenApiLoginKey": {
        "type": "object",
        "properties": {
          "KeyName": {
            "type": "string",
            "nullable": true
          },
          "KeyValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgCustomFieldModel": {
        "type": "object",
        "properties": {
          "ColumnName": {
            "type": "string",
            "nullable": true
          },
          "ValueType": {
            "type": "string",
            "nullable": true
          },
          "DefaultValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgLibraryModel": {
        "type": "object",
        "properties": {
          "PackageId": {
            "type": "string",
            "format": "uuid"
          },
          "FirstFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastFound": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "NApps": {
            "type": "integer",
            "format": "int32"
          },
          "NumberOfLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NumOfIssues": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "Discovered",
              "Rediscovered",
              "Removed"
            ],
            "type": "string"
          },
          "Technology": {
            "type": "string",
            "nullable": true
          },
          "Malware": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrgLibraryModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgLibraryModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PalleteItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "sortVal": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PolicyAssociationModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Expression": {
            "type": "string",
            "nullable": true
          },
          "Predefined": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "NAssociatedApps": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "None",
              "OwaspTop10_2017",
              "Sans25",
              "EuGdpr_2016",
              "PCI",
              "Hipaa",
              "OwaspTop10Mobile_2016",
              "ISO27001",
              "ISO27002",
              "Wasc",
              "Nist",
              "Sox",
              "Fisma",
              "Fippa",
              "Efta",
              "DisaStig",
              "Padss",
              "OwaspTop10_2021",
              "OwaspTop10OpenApi_2019",
              "Ccpa",
              "FedRamp",
              "Popia",
              "OwaspTop10Api_2023",
              "Sans25_2023",
              "OwaspTop10CloudNativeApp",
              "Nis2",
              "Dora",
              "OwaspAsvs"
            ],
            "type": "string"
          },
          "Category": {
            "enum": [
              "Custom",
              "Security",
              "Regulation",
              "IndustryStandard"
            ],
            "type": "string"
          },
          "Region": {
            "enum": [
              "Global",
              "US",
              "UK",
              "Canada",
              "EU",
              "Japan",
              "AUS",
              "SouthAfrica"
            ],
            "type": "string"
          },
          "UIFeatures": {
            "type": "string",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean"
          },
          "Parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyAssociationModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyAssociationModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyConfigurationModel": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "Parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NameValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Expression": {
            "type": "string",
            "nullable": true
          },
          "Predefined": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "NAssociatedApps": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "None",
              "OwaspTop10_2017",
              "Sans25",
              "EuGdpr_2016",
              "PCI",
              "Hipaa",
              "OwaspTop10Mobile_2016",
              "ISO27001",
              "ISO27002",
              "Wasc",
              "Nist",
              "Sox",
              "Fisma",
              "Fippa",
              "Efta",
              "DisaStig",
              "Padss",
              "OwaspTop10_2021",
              "OwaspTop10OpenApi_2019",
              "Ccpa",
              "FedRamp",
              "Popia",
              "OwaspTop10Api_2023",
              "Sans25_2023",
              "OwaspTop10CloudNativeApp",
              "Nis2",
              "Dora",
              "OwaspAsvs"
            ],
            "type": "string"
          },
          "Category": {
            "enum": [
              "Custom",
              "Security",
              "Regulation",
              "IndustryStandard"
            ],
            "type": "string"
          },
          "Region": {
            "enum": [
              "Global",
              "US",
              "UK",
              "Canada",
              "EU",
              "Japan",
              "AUS",
              "SouthAfrica"
            ],
            "type": "string"
          },
          "UIFeatures": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostmanCollectionFiles": {
        "type": "object",
        "properties": {
          "CollectionJsonFileId": {
            "type": "string",
            "format": "uuid"
          },
          "EnvironmentJsonFileId": {
            "type": "string",
            "format": "uuid"
          },
          "GlobalJsonFileId": {
            "type": "string",
            "format": "uuid"
          },
          "AdditionalZipFileId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Presence": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "PresenceName": {
            "type": "string",
            "nullable": true
          },
          "KeyExpiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "HostName": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Active",
              "NeverUsed",
              "KeyExpired",
              "KeyNeverUsed",
              "Inactive",
              "Disable"
            ],
            "type": "string"
          },
          "IsV2": {
            "type": "boolean"
          },
          "Platform": {
            "type": "string",
            "nullable": true
          },
          "GitPlatform": {
            "enum": [
              "GitHub"
            ],
            "type": "string",
            "nullable": true
          },
          "GitConnectActive": {
            "type": "boolean"
          },
          "GitConnectUrl": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "GitServerUrl": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true
          },
          "GitServerName": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PresencePageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Presence"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "Recurrence": {
        "type": "object",
        "properties": {
          "Rule": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegionInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegionsInfo": {
        "type": "object",
        "properties": {
          "Regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInfo"
            },
            "nullable": true
          },
          "DefaultRegion": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterOrganization": {
        "type": "object",
        "properties": {
          "OrganizationName": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "LicenseKey": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegistrationResult": {
        "type": "object",
        "properties": {
          "RegisterResult": {
            "enum": [
              "Success",
              "VerificationRequired",
              "Failed"
            ],
            "type": "string"
          },
          "RegisterError": {
            "enum": [
              "None",
              "InvalidLicense",
              "AlreadyUsedTheService",
              "ShouldFillRegistrationForm"
            ],
            "type": "string"
          },
          "MHSError": {
            "enum": [
              "None",
              "GeneralError",
              "InvalidInput",
              "MissingCapabilities",
              "MHSLicenseGeneralStructureUnrecognized",
              "MHSLicenseCertificateInvalid",
              "MHSLicensePasetoSignatureInvalid",
              "MHSLicensePasetoRawPayloadUnrecognized",
              "MHSLicenseInvalidAs360Fingerprint",
              "MHSLicenseDeploymentIdMismatch",
              "MHSLicenseIssuedEarlierThanCurrentlyUsed",
              "MHSLicenseHasNoRelevantEntitlements",
              "MHSLicenseWasAlreadyUploaded",
              "MHSLicenseOldFeatureIsMissing",
              "MHSLicenseChangingPreviousMhsValue",
              "MHSLicenseWasIssuedTooLongAgo"
            ],
            "type": "string"
          },
          "MHSSignature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegulationReportJob": {
        "required": [
          "Configuration"
        ],
        "type": "object",
        "properties": {
          "OdataFilter": {
            "type": "string",
            "nullable": true
          },
          "ApplyPolicies": {
            "enum": [
              "None",
              "All",
              "Select"
            ],
            "type": "string"
          },
          "SelectPolicyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "Configuration": {
            "$ref": "#/components/schemas/RegulationReportOptions"
          }
        },
        "additionalProperties": false
      },
      "RegulationReportOptions": {
        "required": [
          "RegulationReportType"
        ],
        "type": "object",
        "properties": {
          "ReportFileType": {
            "enum": [
              "Pdf",
              "Html",
              "Xml",
              "Csv",
              "Sarif"
            ],
            "type": "string"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "nullable": true
          },
          "RegulationReportType": {
            "enum": [
              "None",
              "OwaspTop10_2017",
              "Sans25",
              "EuGdpr_2016",
              "PCI",
              "Hipaa",
              "OwaspTop10Mobile_2016",
              "ISO27001",
              "ISO27002",
              "Wasc",
              "Nist",
              "Sox",
              "Fisma",
              "Fippa",
              "Efta",
              "DisaStig",
              "Padss",
              "OwaspTop10_2021",
              "OwaspTop10OpenApi_2019",
              "Ccpa",
              "FedRamp",
              "Popia",
              "OwaspTop10Api_2023",
              "Sans25_2023",
              "OwaspTop10CloudNativeApp",
              "Nis2",
              "Dora",
              "OwaspAsvs"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RepoDetails": {
        "required": [
          "Owner",
          "Platform",
          "RepoName",
          "RepoSignature"
        ],
        "type": "object",
        "properties": {
          "GitConnectPresenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "RepoSignature": {
            "minLength": 1,
            "pattern": "\\d{5,20}:[a-zA-Z0-9/+]{43,1024}={0,2}",
            "type": "string"
          },
          "Owner": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]{1,39}$",
            "type": "string"
          },
          "RepoName": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]{1,100}$",
            "type": "string"
          },
          "BranchName": {
            "pattern": "^[a-zA-Z0-9_./-]{1,256}$",
            "type": "string",
            "nullable": true
          },
          "Platform": {
            "enum": [
              "GitHub"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RepoSignature": {
        "type": "object",
        "properties": {
          "Signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RepoSignatureRequest": {
        "type": "object",
        "properties": {
          "AccessToken": {
            "pattern": "^[a-z]{3}_[a-zA-Z0-9]{36}$",
            "type": "string",
            "nullable": true
          },
          "Owner": {
            "pattern": "^[a-zA-Z0-9_.-]{1,39}$",
            "type": "string",
            "nullable": true
          },
          "RepoName": {
            "pattern": "^[a-zA-Z0-9_.-]{1,100}$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportStatusModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Pending",
              "Starting",
              "Running",
              "Failed",
              "Ready",
              "Deleted"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "ValidUntil": {
            "type": "string",
            "format": "date-time"
          },
          "HtmlInsteadOfPdf": {
            "type": "boolean"
          },
          "DownloadLink": {
            "type": "string",
            "nullable": true
          },
          "ReportFileType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportStatusModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportStatusModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleModel": {
        "required": [
          "Capabilities",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "ExternalGroupName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "AsmId": {
            "type": "string",
            "nullable": true
          },
          "Predefined": {
            "type": "boolean"
          },
          "IsAssignable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RoleModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SCXSubscription": {
        "type": "object",
        "properties": {
          "LicenseKeyPostfix": {
            "type": "string",
            "nullable": true
          },
          "SubscriptionId": {
            "type": "integer",
            "format": "int64"
          },
          "OverageSupport": {
            "type": "boolean"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "RenewalDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PurchaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "HTrial",
              "Applications",
              "ScanExecution",
              "AnalyzerConcurrent",
              "ConsultantServices",
              "Premium",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser"
            ],
            "type": "string"
          },
          "NSeats": {
            "type": "integer",
            "format": "int32"
          },
          "NTakenSeats": {
            "type": "integer",
            "format": "int32"
          },
          "NExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "NApps": {
            "type": "integer",
            "format": "int32"
          },
          "FullReport": {
            "type": "boolean"
          },
          "MaxConcurrentScans": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PurchaseSupplier": {
            "type": "string",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "IncludeOpenSource": {
            "type": "boolean"
          },
          "IncludeIAST": {
            "type": "boolean"
          },
          "MaxIASTConcurrency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Is3PMOrder": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SCXUserInfo": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "nullable": true
          },
          "IsAdmin": {
            "type": "boolean"
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "IdleTimeForSignout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SastScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          },
          "ClientToolMessage": {
            "type": "string",
            "nullable": true
          },
          "ClientToolOS": {
            "type": "string",
            "nullable": true
          },
          "Languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "IsSourceScanning": {
            "type": "boolean"
          },
          "NTotalLines": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GitRepository": {
            "type": "string",
            "nullable": true
          },
          "GitCommitId": {
            "type": "string",
            "nullable": true
          },
          "GitBranch": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SastScanModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "NextScheduledRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "nullable": true
          },
          "AppName": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "LatestExecution": {
            "$ref": "#/components/schemas/SastScanExecutionModel"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "NExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "DeletedAllowed": {
            "type": "boolean"
          },
          "OfferingTriggered": {
            "type": "boolean"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "RescanAllowed": {
            "type": "boolean"
          },
          "Presence": {
            "$ref": "#/components/schemas/Presence"
          },
          "IastAgentStatus": {
            "enum": [
              "None",
              "Active",
              "KeyNeverUsed",
              "Inactive"
            ],
            "type": "string"
          },
          "IastAgentType": {
            "enum": [
              "Java",
              "DotNet",
              "NodeJS",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string",
            "nullable": true
          },
          "IastConnLostStopTimer": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "HTrial",
              "Applications",
              "ScanExecution",
              "AnalyzerConcurrent",
              "ConsultantServices",
              "Premium",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser"
            ],
            "type": "string"
          },
          "IsUploadedFile": {
            "type": "boolean"
          },
          "ParsedFromUploadedFile": {
            "type": "boolean"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "UseTestOptimizer": {
            "type": "boolean"
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "IsDemoScan": {
            "type": "boolean"
          },
          "ExpirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "GitRepoOwner": {
            "type": "string",
            "nullable": true
          },
          "GitRepoName": {
            "type": "string",
            "nullable": true
          },
          "GitBranch": {
            "type": "string",
            "nullable": true
          },
          "GitRepoPlatform": {
            "enum": [
              "GitHub"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SbomReportOptions": {
        "type": "object",
        "properties": {
          "SbomFormat": {
            "enum": [
              "SPDX_Json",
              "SPDX_Text"
            ],
            "type": "string"
          },
          "FileName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "DocumentName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "OrganizationName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "CreatorName": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "CreatorEmail": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScaScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          },
          "ClientToolMessage": {
            "type": "string",
            "nullable": true
          },
          "ClientToolOS": {
            "type": "string",
            "nullable": true
          },
          "Languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "IsSourceScanning": {
            "type": "boolean"
          },
          "GitRepository": {
            "type": "string",
            "nullable": true
          },
          "GitCommitId": {
            "type": "string",
            "nullable": true
          },
          "GitBranch": {
            "type": "string",
            "nullable": true
          },
          "Method": {
            "enum": [
              "None",
              "Hash",
              "Config",
              "Both"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScaScanModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "NextScheduledRun": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AppId": {
            "type": "string",
            "nullable": true
          },
          "AppName": {
            "type": "string",
            "nullable": true
          },
          "Technology": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IFA",
              "DastAutomation",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string"
          },
          "LatestExecution": {
            "$ref": "#/components/schemas/ScaScanExecutionModel"
          },
          "EnableMailNotification": {
            "type": "boolean"
          },
          "NExecutions": {
            "type": "integer",
            "format": "int32"
          },
          "DeletedAllowed": {
            "type": "boolean"
          },
          "OfferingTriggered": {
            "type": "boolean"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "RescanAllowed": {
            "type": "boolean"
          },
          "Presence": {
            "$ref": "#/components/schemas/Presence"
          },
          "IastAgentStatus": {
            "enum": [
              "None",
              "Active",
              "KeyNeverUsed",
              "Inactive"
            ],
            "type": "string"
          },
          "IastAgentType": {
            "enum": [
              "Java",
              "DotNet",
              "NodeJS",
              "PhpWindows",
              "PhpRedHat",
              "PhpUbuntu",
              "Kubernetes"
            ],
            "type": "string",
            "nullable": true
          },
          "IastConnLostStopTimer": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "HTrial",
              "Applications",
              "ScanExecution",
              "AnalyzerConcurrent",
              "ConsultantServices",
              "Premium",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser"
            ],
            "type": "string"
          },
          "IsUploadedFile": {
            "type": "boolean"
          },
          "ParsedFromUploadedFile": {
            "type": "boolean"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "UseTestOptimizer": {
            "type": "boolean"
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "IsDemoScan": {
            "type": "boolean"
          },
          "ExpirationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "GitRepoOwner": {
            "type": "string",
            "nullable": true
          },
          "GitRepoName": {
            "type": "string",
            "nullable": true
          },
          "GitBranch": {
            "type": "string",
            "nullable": true
          },
          "GitRepoPlatform": {
            "enum": [
              "GitHub"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScanExecute": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "IncrementalBaseJobId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "IsIncrementalRetest": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ScanExecutionInfo": {
        "type": "object",
        "properties": {
          "ScanName": {
            "type": "string",
            "nullable": true
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "ExecutionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ScanExecutionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ScanId": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ScanEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExecutionDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "PredefinedMessageKey": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Running",
              "Stopping",
              "Pausing",
              "InQueue",
              "Paused",
              "Ready",
              "Failed"
            ],
            "type": "string"
          },
          "NIssuesFound": {
            "type": "integer",
            "format": "int32"
          },
          "Result": {
            "enum": [
              "None",
              "NoIssues",
              "Informational",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string"
          },
          "ReadStatus": {
            "enum": [
              "None",
              "Unread",
              "Read"
            ],
            "type": "string"
          },
          "Progress": {
            "type": "integer",
            "format": "int32"
          },
          "NCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourceLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "NOpenSourcePackages": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppCriticalIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppHighIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppMediumIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppLowIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NNewAppInfoIssues": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableReports": {
            "type": "array",
            "items": {
              "enum": [
                "Xml",
                "Pdf",
                "Html",
                "CompliancePdf",
                "OwaspTop10Pdf",
                "Sans25Pdf",
                "RawXml",
                "Zip",
                "Json"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "ExecutionProgress": {
            "enum": [
              "Pending",
              "Running",
              "UnderReview",
              "RunningManually",
              "Paused",
              "Completed"
            ],
            "type": "string"
          },
          "IncludeCustomUserMessage": {
            "type": "boolean"
          },
          "HasLogs": {
            "type": "boolean"
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          },
          "IsScanFileAvailable": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "EnablementMessage": {
            "type": "string",
            "nullable": true
          },
          "HandledByScanEnabler": {
            "type": "boolean"
          },
          "IsPartial": {
            "type": "boolean"
          },
          "QueuedDurationSec": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidForIncremental": {
            "type": "boolean"
          },
          "SupportModeEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SecurityReportJob": {
        "required": [
          "Configuration"
        ],
        "type": "object",
        "properties": {
          "OdataFilter": {
            "type": "string",
            "nullable": true
          },
          "ApplyPolicies": {
            "enum": [
              "None",
              "All",
              "Select"
            ],
            "type": "string"
          },
          "SelectPolicyIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "Configuration": {
            "$ref": "#/components/schemas/SecurityReportOptions"
          }
        },
        "additionalProperties": false
      },
      "SecurityReportOptions": {
        "type": "object",
        "properties": {
          "ReportFileType": {
            "enum": [
              "Pdf",
              "Html",
              "Xml",
              "Csv",
              "Sarif"
            ],
            "type": "string"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "nullable": true
          },
          "Summary": {
            "type": "boolean"
          },
          "Details": {
            "type": "boolean"
          },
          "Discussion": {
            "type": "boolean"
          },
          "Overview": {
            "type": "boolean"
          },
          "TableOfContent": {
            "type": "boolean"
          },
          "Advisories": {
            "type": "boolean"
          },
          "FixRecommendation": {
            "type": "boolean"
          },
          "History": {
            "type": "boolean"
          },
          "Coverage": {
            "type": "boolean"
          },
          "MinimizeDetails": {
            "type": "boolean"
          },
          "Articles": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "StringStringIEnumerableKeyValuePair": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionInfoModel": {
        "type": "object",
        "properties": {
          "IsValid": {
            "type": "boolean"
          },
          "IsTrial": {
            "type": "boolean"
          },
          "HideCounters": {
            "type": "boolean"
          },
          "OfferingType": {
            "enum": [
              "None",
              "Trial",
              "Metered",
              "PayPerApplication",
              "HTrial",
              "PayPerScanExec",
              "Premium",
              "AnalyzerConcurrent",
              "OpenSourcePerApplication",
              "OpenSourcePremium",
              "OpenSourceConcurrent",
              "IASTConcurrent",
              "IASTPayPerApp",
              "Promotional",
              "Silver",
              "Gold",
              "Platinum",
              "SCAPerApplication",
              "ContributingUser",
              "ConsultantServices"
            ],
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "RemovalDate": {
            "type": "string",
            "format": "date-time"
          },
          "SubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "TenantId": {
            "type": "string",
            "nullable": true
          },
          "TotalSeats": {
            "type": "integer",
            "format": "int32"
          },
          "TakenSeats": {
            "type": "integer",
            "format": "int32"
          },
          "FullCapabilitiesForTrialEnabled": {
            "type": "boolean"
          },
          "PurchaseSupplier": {
            "type": "string",
            "nullable": true
          },
          "MaxUsers": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TargetSettings": {
        "type": "object",
        "properties": {
          "StartingUrl": {
            "type": "string",
            "nullable": true
          },
          "AdditionalDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ExclusionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExcludeExceptionModel"
            },
            "nullable": true
          },
          "ShouldScanBelowThisDirectory": {
            "type": "boolean",
            "nullable": true
          },
          "UseCaseSensitivePaths": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantBasicInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TenantInfo": {
        "type": "object",
        "properties": {
          "NumberOfApps": {
            "type": "integer",
            "format": "int32"
          },
          "TenantId": {
            "type": "string",
            "format": "uuid"
          },
          "TenantName": {
            "type": "string",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "nullable": true
          },
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SCXSubscription"
            },
            "nullable": true
          },
          "HideUsageCounters": {
            "type": "boolean"
          },
          "IssuesStatusInheritance": {
            "enum": [
              "None",
              "Noise",
              "Fixed"
            ],
            "type": "string",
            "readOnly": true
          },
          "SubscriptionTechnologies": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ActiveTechnologies": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UserInfo": {
            "$ref": "#/components/schemas/SCXUserInfo"
          },
          "EntitledForExpertOnDemand": {
            "type": "boolean"
          },
          "NumBusinessUnitsInOrg": {
            "type": "integer",
            "format": "int32"
          },
          "AppsWithBusinessUnit": {
            "type": "integer",
            "format": "int32"
          },
          "AppsWithoutBusinessUnit": {
            "type": "integer",
            "format": "int32"
          },
          "SCAEnabled": {
            "type": "boolean"
          },
          "MaxScansPerApp": {
            "type": "integer",
            "format": "int32"
          },
          "AutoDeleteExceededScansPerApp": {
            "type": "boolean"
          },
          "AllowAppManagerOverrideAutoDeleteSettings": {
            "type": "boolean"
          },
          "MaxUsers": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultSubscriptionId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "EnableIssuesAutoClose": {
            "type": "boolean"
          },
          "EnableOverrideIssuesAutoClose": {
            "type": "boolean"
          },
          "IdleTimeForSignout": {
            "type": "integer",
            "format": "int32"
          },
          "AllowPresence": {
            "type": "boolean"
          },
          "ShowNonCompliantIssuesOnly": {
            "type": "boolean"
          },
          "DomainVerificationRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TenantInfoModel": {
        "type": "object",
        "properties": {
          "TenantName": {
            "type": "string",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "nullable": true
          },
          "SubscriptionTechnologies": {
            "enum": [
              "DynamicAnalyzer",
              "StaticAnalyzer",
              "IASTAnalyzer",
              "ScaAnalyzer"
            ],
            "type": "string",
            "nullable": true
          },
          "AutoDeleteExceededScansPerApp": {
            "type": "boolean",
            "nullable": true
          },
          "AllowAppManagerOverrideAutoDeleteSettings": {
            "type": "boolean",
            "nullable": true
          },
          "EnableIssuesAutoClose": {
            "type": "boolean",
            "nullable": true
          },
          "EnableOverrideIssuesAutoClose": {
            "type": "boolean",
            "nullable": true
          },
          "ShowNonCompliantIssuesOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestsSettings": {
        "type": "object",
        "properties": {
          "PredefinedTestPolicy": {
            "enum": [
              "Complete",
              "Default",
              "OwaspTop10Api",
              "OwaspTop10",
              "ProductionSite"
            ],
            "type": "string",
            "nullable": true
          },
          "TestOptimizationLevel": {
            "enum": [
              "NoOptimization",
              "Fast",
              "Faster",
              "Fastest"
            ],
            "type": "string",
            "nullable": true
          },
          "TestLoginPages": {
            "type": "boolean",
            "nullable": true
          },
          "TestLoginPagesWithoutSessionIds": {
            "type": "boolean",
            "nullable": true
          },
          "TestLogoutPages": {
            "type": "boolean",
            "nullable": true
          },
          "DetectVulnerableComponents": {
            "type": "boolean",
            "default": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeFrame": {
        "type": "object",
        "properties": {
          "TimeZoneOffset": {
            "maximum": 14,
            "minimum": -14,
            "type": "number",
            "format": "float"
          },
          "Interval": {
            "enum": [
              "Day",
              "Week",
              "Month",
              "Quarter",
              "Year"
            ],
            "type": "string"
          },
          "Start": {
            "type": "string",
            "format": "date-time"
          },
          "End": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TimedDataPoints": {
        "type": "object",
        "properties": {
          "Time": {
            "type": "string",
            "format": "date-time"
          },
          "Data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TriageResult": {
        "type": "object",
        "properties": {
          "NProvidedIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NUpdatedIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NInheritedIssues": {
            "type": "integer",
            "format": "int32"
          },
          "NStatusConflictIssues": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TrialUserDetails": {
        "required": [
          "Email"
        ],
        "type": "object",
        "properties": {
          "Email": {
            "maxLength": 256,
            "minLength": 5,
            "type": "string"
          },
          "LastName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "OrgName": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "BackChunnelKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateAssetGroupModel": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "IssuesStatusInheritance": {
            "enum": [
              "None",
              "Noise",
              "Fixed"
            ],
            "type": "string",
            "nullable": true
          },
          "ContactUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "EnableIssuesAutoClose": {
            "type": "boolean",
            "nullable": true
          },
          "Name": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateBusinessUnitModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "AppIdsToAdd": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "AppIdsToRemove": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCustomFieldValueRequest": {
        "type": "object",
        "properties": {
          "ColumnName": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDastScan": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "EnableMailNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "PresenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "RecurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "RecurrenceStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecurrenceEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDomainManagementModel": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "IsAccessLimitedForAssetGroups": {
            "type": "boolean",
            "nullable": true
          },
          "Description": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "AssetGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "IncludeSubDomains": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateIastScan": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "EnableMailNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "Locale": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "FullyAutomatic": {
            "type": "boolean"
          },
          "ConfigFileId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateIssue": {
        "type": "object",
        "properties": {
          "ExternalId": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateIssuesById": {
        "type": "object",
        "properties": {
          "ExternalId": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Open",
              "InProgress",
              "Reopened",
              "Noise",
              "Passed",
              "Fixed",
              "New"
            ],
            "type": "string",
            "nullable": true
          },
          "Comment": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "issueIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePresence": {
        "required": [
          "PresenceName"
        ],
        "type": "object",
        "properties": {
          "PresenceName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateRoleModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "IsDefault": {
            "type": "boolean",
            "nullable": true
          },
          "ExternalGroupName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Capabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserModel": {
        "type": "object",
        "properties": {
          "AssetGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "RoleId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateWebhook": {
        "type": "object",
        "properties": {
          "PresenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Uri": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Global": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadViewModel": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "string",
            "format": "uuid"
          },
          "FileExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "FileProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "EligibleForTrial": {
            "type": "boolean"
          },
          "ReasonForNotEligibleToTrial": {
            "enum": [
              "None",
              "AlreadyUsedTheService",
              "ShouldFillRegistrationForm"
            ],
            "type": "string"
          },
          "BlockedEmailDomain": {
            "type": "boolean"
          },
          "RegisteredLoginProviders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "CurrentLoginProvider": {
            "type": "string",
            "nullable": true
          },
          "RegisteredInOkta": {
            "type": "boolean"
          },
          "Tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserOrgRole"
            },
            "nullable": true
          },
          "CurrentTenantId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ShowWelcomeMessage": {
            "type": "boolean"
          },
          "HiddenFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "IsAdmin": {
            "type": "boolean"
          },
          "RoleId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "RoleName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "HasApiKey": {
            "type": "boolean"
          },
          "Status": {
            "enum": [
              "Active",
              "BlockNewScans",
              "BlockAccess",
              "PendingActivation",
              "BlockAccessFromAPI",
              "Archived",
              "InvitationExpired"
            ],
            "type": "string"
          },
          "InvitedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserNameModel": {
        "type": "object",
        "properties": {
          "UserName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserOrgRole": {
        "type": "object",
        "properties": {
          "RoleInfo": {
            "$ref": "#/components/schemas/BasicRoleInfo"
          },
          "Tenant": {
            "$ref": "#/components/schemas/TenantBasicInfo"
          },
          "Status": {
            "enum": [
              "Active",
              "BlockNewScans",
              "BlockAccess",
              "PendingActivation",
              "BlockAccessFromAPI",
              "Archived",
              "InvitationExpired"
            ],
            "type": "string"
          },
          "InvitedBy": {
            "$ref": "#/components/schemas/BasicUserInfo"
          }
        },
        "additionalProperties": false
      },
      "UserPreference": {
        "required": [
          "Key",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_.]{1,256}",
            "type": "string"
          },
          "Value": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Represents a user preference"
      },
      "VerAndHashes": {
        "type": "object",
        "properties": {
          "Version": {
            "maximum": 256,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "Hashes": {
            "maxItems": 500,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookAssociation": {
        "required": [
          "Scope",
          "ScopeId"
        ],
        "type": "object",
        "properties": {
          "Scope": {
            "enum": [
              "AssetGroup",
              "Application"
            ],
            "type": "string"
          },
          "ScopeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "WebhookModel": {
        "required": [
          "Event",
          "Global",
          "Id",
          "Presence",
          "Uri"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Uri": {
            "minLength": 1,
            "type": "string"
          },
          "Presence": {
            "$ref": "#/components/schemas/Presence"
          },
          "AssetGroup": {
            "$ref": "#/components/schemas/AssetGroupShortModel"
          },
          "Global": {
            "type": "boolean"
          },
          "Event": {
            "enum": [
              "ScanExecutionCompleted",
              "ApplicationUpdated",
              "ScaneExecutionCompleted"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WebhookModelPageResultModel": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookModel"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter the Bearer Authorization string",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}